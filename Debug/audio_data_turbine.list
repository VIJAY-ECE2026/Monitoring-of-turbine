
audio_data_turbine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005210  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005428  08005428  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005430  08005430  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005430  08005430  00006430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005438  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000068  080054a0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  080054a0  000076c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6d8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f01  00000000  00000000  00014770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00016678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093a  00000000  00000000  00017298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221d2  00000000  00000000  00017bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df06  00000000  00000000  00039da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d12b9  00000000  00000000  00047caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118f63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  00118fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0011ca0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005388 	.word	0x08005388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005388 	.word	0x08005388

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b96a 	b.w	80008d4 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	460c      	mov	r4, r1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d14e      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000624:	4694      	mov	ip, r2
 8000626:	458c      	cmp	ip, r1
 8000628:	4686      	mov	lr, r0
 800062a:	fab2 f282 	clz	r2, r2
 800062e:	d962      	bls.n	80006f6 <__udivmoddi4+0xde>
 8000630:	b14a      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	4091      	lsls	r1, r2
 8000638:	fa20 f303 	lsr.w	r3, r0, r3
 800063c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	fa00 fe02 	lsl.w	lr, r0, r2
 8000646:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800064a:	fa1f f68c 	uxth.w	r6, ip
 800064e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000652:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000656:	fb07 1114 	mls	r1, r7, r4, r1
 800065a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065e:	fb04 f106 	mul.w	r1, r4, r6
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f104 30ff 	add.w	r0, r4, #4294967295
 800066e:	f080 8112 	bcs.w	8000896 <__udivmoddi4+0x27e>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 810f 	bls.w	8000896 <__udivmoddi4+0x27e>
 8000678:	3c02      	subs	r4, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a59      	subs	r1, r3, r1
 800067e:	fa1f f38e 	uxth.w	r3, lr
 8000682:	fbb1 f0f7 	udiv	r0, r1, r7
 8000686:	fb07 1110 	mls	r1, r7, r0, r1
 800068a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800068e:	fb00 f606 	mul.w	r6, r0, r6
 8000692:	429e      	cmp	r6, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x94>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 31ff 	add.w	r1, r0, #4294967295
 800069e:	f080 80fc 	bcs.w	800089a <__udivmoddi4+0x282>
 80006a2:	429e      	cmp	r6, r3
 80006a4:	f240 80f9 	bls.w	800089a <__udivmoddi4+0x282>
 80006a8:	4463      	add	r3, ip
 80006aa:	3802      	subs	r0, #2
 80006ac:	1b9b      	subs	r3, r3, r6
 80006ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	b11d      	cbz	r5, 80006be <__udivmoddi4+0xa6>
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	e9c5 3200 	strd	r3, r2, [r5]
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d905      	bls.n	80006d2 <__udivmoddi4+0xba>
 80006c6:	b10d      	cbz	r5, 80006cc <__udivmoddi4+0xb4>
 80006c8:	e9c5 0100 	strd	r0, r1, [r5]
 80006cc:	2100      	movs	r1, #0
 80006ce:	4608      	mov	r0, r1
 80006d0:	e7f5      	b.n	80006be <__udivmoddi4+0xa6>
 80006d2:	fab3 f183 	clz	r1, r3
 80006d6:	2900      	cmp	r1, #0
 80006d8:	d146      	bne.n	8000768 <__udivmoddi4+0x150>
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xcc>
 80006de:	4290      	cmp	r0, r2
 80006e0:	f0c0 80f0 	bcc.w	80008c4 <__udivmoddi4+0x2ac>
 80006e4:	1a86      	subs	r6, r0, r2
 80006e6:	eb64 0303 	sbc.w	r3, r4, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d0e6      	beq.n	80006be <__udivmoddi4+0xa6>
 80006f0:	e9c5 6300 	strd	r6, r3, [r5]
 80006f4:	e7e3      	b.n	80006be <__udivmoddi4+0xa6>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	f040 8090 	bne.w	800081c <__udivmoddi4+0x204>
 80006fc:	eba1 040c 	sub.w	r4, r1, ip
 8000700:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000704:	fa1f f78c 	uxth.w	r7, ip
 8000708:	2101      	movs	r1, #1
 800070a:	fbb4 f6f8 	udiv	r6, r4, r8
 800070e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000712:	fb08 4416 	mls	r4, r8, r6, r4
 8000716:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800071a:	fb07 f006 	mul.w	r0, r7, r6
 800071e:	4298      	cmp	r0, r3
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0x11c>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f106 34ff 	add.w	r4, r6, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x11a>
 800072c:	4298      	cmp	r0, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2b4>
 8000732:	4626      	mov	r6, r4
 8000734:	1a1c      	subs	r4, r3, r0
 8000736:	fa1f f38e 	uxth.w	r3, lr
 800073a:	fbb4 f0f8 	udiv	r0, r4, r8
 800073e:	fb08 4410 	mls	r4, r8, r0, r4
 8000742:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000746:	fb00 f707 	mul.w	r7, r0, r7
 800074a:	429f      	cmp	r7, r3
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x148>
 800074e:	eb1c 0303 	adds.w	r3, ip, r3
 8000752:	f100 34ff 	add.w	r4, r0, #4294967295
 8000756:	d202      	bcs.n	800075e <__udivmoddi4+0x146>
 8000758:	429f      	cmp	r7, r3
 800075a:	f200 80b0 	bhi.w	80008be <__udivmoddi4+0x2a6>
 800075e:	4620      	mov	r0, r4
 8000760:	1bdb      	subs	r3, r3, r7
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	e7a5      	b.n	80006b4 <__udivmoddi4+0x9c>
 8000768:	f1c1 0620 	rsb	r6, r1, #32
 800076c:	408b      	lsls	r3, r1
 800076e:	fa22 f706 	lsr.w	r7, r2, r6
 8000772:	431f      	orrs	r7, r3
 8000774:	fa20 fc06 	lsr.w	ip, r0, r6
 8000778:	fa04 f301 	lsl.w	r3, r4, r1
 800077c:	ea43 030c 	orr.w	r3, r3, ip
 8000780:	40f4      	lsrs	r4, r6
 8000782:	fa00 f801 	lsl.w	r8, r0, r1
 8000786:	0c38      	lsrs	r0, r7, #16
 8000788:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800078c:	fbb4 fef0 	udiv	lr, r4, r0
 8000790:	fa1f fc87 	uxth.w	ip, r7
 8000794:	fb00 441e 	mls	r4, r0, lr, r4
 8000798:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079c:	fb0e f90c 	mul.w	r9, lr, ip
 80007a0:	45a1      	cmp	r9, r4
 80007a2:	fa02 f201 	lsl.w	r2, r2, r1
 80007a6:	d90a      	bls.n	80007be <__udivmoddi4+0x1a6>
 80007a8:	193c      	adds	r4, r7, r4
 80007aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ae:	f080 8084 	bcs.w	80008ba <__udivmoddi4+0x2a2>
 80007b2:	45a1      	cmp	r9, r4
 80007b4:	f240 8081 	bls.w	80008ba <__udivmoddi4+0x2a2>
 80007b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007bc:	443c      	add	r4, r7
 80007be:	eba4 0409 	sub.w	r4, r4, r9
 80007c2:	fa1f f983 	uxth.w	r9, r3
 80007c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007ca:	fb00 4413 	mls	r4, r0, r3, r4
 80007ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007d6:	45a4      	cmp	ip, r4
 80007d8:	d907      	bls.n	80007ea <__udivmoddi4+0x1d2>
 80007da:	193c      	adds	r4, r7, r4
 80007dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80007e0:	d267      	bcs.n	80008b2 <__udivmoddi4+0x29a>
 80007e2:	45a4      	cmp	ip, r4
 80007e4:	d965      	bls.n	80008b2 <__udivmoddi4+0x29a>
 80007e6:	3b02      	subs	r3, #2
 80007e8:	443c      	add	r4, r7
 80007ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007ee:	fba0 9302 	umull	r9, r3, r0, r2
 80007f2:	eba4 040c 	sub.w	r4, r4, ip
 80007f6:	429c      	cmp	r4, r3
 80007f8:	46ce      	mov	lr, r9
 80007fa:	469c      	mov	ip, r3
 80007fc:	d351      	bcc.n	80008a2 <__udivmoddi4+0x28a>
 80007fe:	d04e      	beq.n	800089e <__udivmoddi4+0x286>
 8000800:	b155      	cbz	r5, 8000818 <__udivmoddi4+0x200>
 8000802:	ebb8 030e 	subs.w	r3, r8, lr
 8000806:	eb64 040c 	sbc.w	r4, r4, ip
 800080a:	fa04 f606 	lsl.w	r6, r4, r6
 800080e:	40cb      	lsrs	r3, r1
 8000810:	431e      	orrs	r6, r3
 8000812:	40cc      	lsrs	r4, r1
 8000814:	e9c5 6400 	strd	r6, r4, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	e750      	b.n	80006be <__udivmoddi4+0xa6>
 800081c:	f1c2 0320 	rsb	r3, r2, #32
 8000820:	fa20 f103 	lsr.w	r1, r0, r3
 8000824:	fa0c fc02 	lsl.w	ip, ip, r2
 8000828:	fa24 f303 	lsr.w	r3, r4, r3
 800082c:	4094      	lsls	r4, r2
 800082e:	430c      	orrs	r4, r1
 8000830:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000834:	fa00 fe02 	lsl.w	lr, r0, r2
 8000838:	fa1f f78c 	uxth.w	r7, ip
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3110 	mls	r1, r8, r0, r3
 8000844:	0c23      	lsrs	r3, r4, #16
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb00 f107 	mul.w	r1, r0, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x24c>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f100 36ff 	add.w	r6, r0, #4294967295
 800085a:	d22c      	bcs.n	80008b6 <__udivmoddi4+0x29e>
 800085c:	4299      	cmp	r1, r3
 800085e:	d92a      	bls.n	80008b6 <__udivmoddi4+0x29e>
 8000860:	3802      	subs	r0, #2
 8000862:	4463      	add	r3, ip
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f1f8 	udiv	r1, r3, r8
 800086c:	fb08 3311 	mls	r3, r8, r1, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb01 f307 	mul.w	r3, r1, r7
 8000878:	42a3      	cmp	r3, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x276>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f101 36ff 	add.w	r6, r1, #4294967295
 8000884:	d213      	bcs.n	80008ae <__udivmoddi4+0x296>
 8000886:	42a3      	cmp	r3, r4
 8000888:	d911      	bls.n	80008ae <__udivmoddi4+0x296>
 800088a:	3902      	subs	r1, #2
 800088c:	4464      	add	r4, ip
 800088e:	1ae4      	subs	r4, r4, r3
 8000890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000894:	e739      	b.n	800070a <__udivmoddi4+0xf2>
 8000896:	4604      	mov	r4, r0
 8000898:	e6f0      	b.n	800067c <__udivmoddi4+0x64>
 800089a:	4608      	mov	r0, r1
 800089c:	e706      	b.n	80006ac <__udivmoddi4+0x94>
 800089e:	45c8      	cmp	r8, r9
 80008a0:	d2ae      	bcs.n	8000800 <__udivmoddi4+0x1e8>
 80008a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008aa:	3801      	subs	r0, #1
 80008ac:	e7a8      	b.n	8000800 <__udivmoddi4+0x1e8>
 80008ae:	4631      	mov	r1, r6
 80008b0:	e7ed      	b.n	800088e <__udivmoddi4+0x276>
 80008b2:	4603      	mov	r3, r0
 80008b4:	e799      	b.n	80007ea <__udivmoddi4+0x1d2>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e7d4      	b.n	8000864 <__udivmoddi4+0x24c>
 80008ba:	46d6      	mov	lr, sl
 80008bc:	e77f      	b.n	80007be <__udivmoddi4+0x1a6>
 80008be:	4463      	add	r3, ip
 80008c0:	3802      	subs	r0, #2
 80008c2:	e74d      	b.n	8000760 <__udivmoddi4+0x148>
 80008c4:	4606      	mov	r6, r0
 80008c6:	4623      	mov	r3, r4
 80008c8:	4608      	mov	r0, r1
 80008ca:	e70f      	b.n	80006ec <__udivmoddi4+0xd4>
 80008cc:	3e02      	subs	r6, #2
 80008ce:	4463      	add	r3, ip
 80008d0:	e730      	b.n	8000734 <__udivmoddi4+0x11c>
 80008d2:	bf00      	nop

080008d4 <__aeabi_idiv0>:
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fbb3 	bl	8001046 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f80e 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f902 	bl	8000aec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 f8d0 	bl	8000a8c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008ec:	f000 f86a 	bl	80009c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_IT(&hadc1);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <main+0x24>)
 80008f2:	f000 ff37 	bl	8001764 <HAL_ADC_Start_IT>

/* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Log();
 80008f6:	f000 f963 	bl	8000bc0 <Log>
 80008fa:	e7fc      	b.n	80008f6 <main+0x1e>
 80008fc:	20000084 	.word	0x20000084

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	@ 0x58
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2244      	movs	r2, #68	@ 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f003 ff82 	bl	8004818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000922:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000926:	f001 febf 	bl	80026a8 <HAL_PWREx_ControlVoltageScaling>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000930:	f000 f984 	bl	8000c3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000934:	f001 fe9a 	bl	800266c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <SystemClock_Config+0xc0>)
 800093a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800093e:	4a20      	ldr	r2, [pc, #128]	@ (80009c0 <SystemClock_Config+0xc0>)
 8000940:	f023 0318 	bic.w	r3, r3, #24
 8000944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000948:	2314      	movs	r3, #20
 800094a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000950:	2301      	movs	r3, #1
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000958:	2360      	movs	r3, #96	@ 0x60
 800095a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000960:	2301      	movs	r3, #1
 8000962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000968:	2328      	movs	r3, #40	@ 0x28
 800096a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800096c:	2307      	movs	r3, #7
 800096e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fee9 	bl	8002754 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000988:	f000 f958 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2303      	movs	r3, #3
 8000992:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	2104      	movs	r1, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fae9 	bl	8002f7c <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b0:	f000 f944 	bl	8000c3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009b4:	f002 fefc 	bl	80037b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009b8:	bf00      	nop
 80009ba:	3758      	adds	r7, #88	@ 0x58
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000

080009c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009da:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 80009dc:	4a29      	ldr	r2, [pc, #164]	@ (8000a84 <MX_ADC1_Init+0xc0>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 80009e2:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 80009e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e8:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a3e:	f000 fd4f 	bl	80014e0 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a48:	f000 f8f8 	bl	8000c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a50:	2306      	movs	r3, #6
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a58:	237f      	movs	r3, #127	@ 0x7f
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_ADC1_Init+0xbc>)
 8000a6a:	f000 ff2f 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a74:	f000 f8e2 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000084 	.word	0x20000084
 8000a84:	50040000 	.word	0x50040000
 8000a88:	19200040 	.word	0x19200040

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000a92:	4a15      	ldr	r2, [pc, #84]	@ (8000ae8 <MX_USART2_UART_Init+0x5c>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ad0:	f002 ff70 	bl	80039b4 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f8af 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000e8 	.word	0x200000e8
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a16      	ldr	r2, [pc, #88]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_GPIO_Init+0x8c>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <MX_GPIO_Init+0x90>)
 8000b50:	f001 fd74 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b54:	2308      	movs	r3, #8
 8000b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_GPIO_Init+0x90>)
 8000b6c:	f001 fbfc 	bl	8002368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000400 	.word	0x48000400

08000b80 <fill_audio_buffer>:

/* USER CODE BEGIN 4 */
void fill_audio_buffer(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	e00c      	b.n	8000ba6 <fill_audio_buffer+0x26>
		audio_buffer[i * AXIS] = audio;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <fill_audio_buffer+0x38>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	490a      	ldr	r1, [pc, #40]	@ (8000bbc <fill_audio_buffer+0x3c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	601a      	str	r2, [r3, #0]
		HAL_Delay(3);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 fac8 	bl	8001130 <HAL_Delay>
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2bff      	cmp	r3, #255	@ 0xff
 8000baa:	ddef      	ble.n	8000b8c <fill_audio_buffer+0xc>
	}
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000170 	.word	0x20000170
 8000bbc:	20000174 	.word	0x20000174

08000bc0 <Log>:

void Log(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	fill_audio_buffer();
 8000bc6:	f7ff ffdb 	bl	8000b80 <fill_audio_buffer>
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	e012      	b.n	8000bf6 <Log+0x36>
		printf("%.2f",audio_buffer[i * AXIS]);
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <Log+0x4c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fcac 	bl	8000538 <__aeabi_f2d>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <Log+0x50>)
 8000be6:	f003 fcc7 	bl	8004578 <iprintf>
		printf(" ");
 8000bea:	2020      	movs	r0, #32
 8000bec:	f003 fcd6 	bl	800459c <putchar>
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2bff      	cmp	r3, #255	@ 0xff
 8000bfa:	dde9      	ble.n	8000bd0 <Log+0x10>
	}
	printf("\r\n");
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <Log+0x54>)
 8000bfe:	f003 fd2b 	bl	8004658 <puts>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000174 	.word	0x20000174
 8000c10:	080053a0 	.word	0x080053a0
 8000c14:	080053a8 	.word	0x080053a8

08000c18 <__io_putchar>:
int __io_putchar(int ch){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c20:	1d39      	adds	r1, r7, #4
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	2201      	movs	r2, #1
 8000c28:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <__io_putchar+0x20>)
 8000c2a:	f002 ff11 	bl	8003a50 <HAL_UART_Transmit>
	return ch;
 8000c2e:	687b      	ldr	r3, [r7, #4]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000e8 	.word	0x200000e8

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09e      	sub	sp, #120	@ 0x78
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2254      	movs	r2, #84	@ 0x54
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fdb1 	bl	8004818 <memset>
  if(hadc->Instance==ADC1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a25      	ldr	r2, [pc, #148]	@ (8000d50 <HAL_ADC_MspInit+0xc0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d143      	bne.n	8000d48 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cc6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cca:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fb68 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000cfa:	f7ff ff9f 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_ADC_MspInit+0xc4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <HAL_ADC_MspInit+0xc4>)
 8000d04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_ADC_MspInit+0xc4>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_ADC_MspInit+0xc4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_ADC_MspInit+0xc4>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_ADC_MspInit+0xc4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d32:	230b      	movs	r3, #11
 8000d34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f001 fb10 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d48:	bf00      	nop
 8000d4a:	3778      	adds	r7, #120	@ 0x78
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	50040000 	.word	0x50040000
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09e      	sub	sp, #120	@ 0x78
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2254      	movs	r2, #84	@ 0x54
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fd4d 	bl	8004818 <memset>
  if(huart->Instance==USART2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a28      	ldr	r2, [pc, #160]	@ (8000e24 <HAL_UART_MspInit+0xcc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d148      	bne.n	8000e1a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fb15 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da0:	f7ff ff4c 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a19      	ldr	r2, [pc, #100]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_UART_MspInit+0xd0>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de4:	2307      	movs	r3, #7
 8000de6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df2:	f001 fab9 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dfa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f001 faa7 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3778      	adds	r7, #120	@ 0x78
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40004400 	.word	0x40004400
 8000e28:	40021000 	.word	0x40021000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e82:	f000 f935 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e00a      	b.n	8000eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	60ba      	str	r2, [r7, #8]
 8000ea8:	b2ca      	uxtb	r2, r1
 8000eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	dbf0      	blt.n	8000e9c <_read+0x12>
  }

  return len;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e009      	b.n	8000eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe9a 	bl	8000c18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbf1      	blt.n	8000ed6 <_write+0x12>
  }
  return len;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_close>:

int _close(int file)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f24:	605a      	str	r2, [r3, #4]
  return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_isatty>:

int _isatty(int file)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f003 fc8e 	bl	80048b4 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000c000 	.word	0x2000c000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000574 	.word	0x20000574
 8000fcc:	200006c8 	.word	0x200006c8

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800102c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff8:	f7ff ffea 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	@ (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f003 fc4d 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001026:	f7ff fc57 	bl	80008d8 <main>

0800102a <LoopForever>:

LoopForever:
    b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800102c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001038:	08005438 	.word	0x08005438
  ldr r2, =_sbss
 800103c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001040:	200006c8 	.word	0x200006c8

08001044 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_IRQHandler>

08001046 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f001 f955 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f80e 	bl	8001078 <HAL_InitTick>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e001      	b.n	800106c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001068:	f7ff fdee 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_InitTick+0x70>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f953 	bl	800234e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10f      	bne.n	80010ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d809      	bhi.n	80010c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f001 f92b 	bl	8002316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_InitTick+0x74>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e004      	b.n	80010d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e001      	b.n	80010d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	20000578 	.word	0x20000578

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000578 	.word	0x20000578

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	609a      	str	r2, [r3, #8]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3360      	adds	r3, #96	@ 0x60
 80011f2:	461a      	mov	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <LL_ADC_SetOffset+0x44>)
 8001202:	4013      	ands	r3, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	4313      	orrs	r3, r2
 8001210:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	03fff000 	.word	0x03fff000

08001228 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3360      	adds	r3, #96	@ 0x60
 8001236:	461a      	mov	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3360      	adds	r3, #96	@ 0x60
 8001264:	461a      	mov	r2, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	431a      	orrs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800127e:	bf00      	nop
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800128a:	b480      	push	{r7}
 800128c:	b087      	sub	sp, #28
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3330      	adds	r3, #48	@ 0x30
 800129a:	461a      	mov	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	4413      	add	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	211f      	movs	r1, #31
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0e9b      	lsrs	r3, r3, #26
 80012c2:	f003 011f 	and.w	r1, r3, #31
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b087      	sub	sp, #28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3314      	adds	r3, #20
 80012f2:	461a      	mov	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	0e5b      	lsrs	r3, r3, #25
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0d1b      	lsrs	r3, r3, #20
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	2107      	movs	r1, #7
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	0d1b      	lsrs	r3, r3, #20
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001350:	43db      	mvns	r3, r3
 8001352:	401a      	ands	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0318 	and.w	r3, r3, #24
 800135a:	4908      	ldr	r1, [pc, #32]	@ (800137c <LL_ADC_SetChannelSingleDiff+0x44>)
 800135c:	40d9      	lsrs	r1, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	400b      	ands	r3, r1
 8001362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	0007ffff 	.word	0x0007ffff

08001380 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6093      	str	r3, [r2, #8]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013b8:	d101      	bne.n	80013be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001408:	d101      	bne.n	800140e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800142c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <LL_ADC_IsEnabled+0x18>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <LL_ADC_IsEnabled+0x1a>
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800147a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800147e:	f043 0204 	orr.w	r2, r3, #4
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d101      	bne.n	80014aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d101      	bne.n	80014d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e126      	b.n	8001748 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fbc1 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff3f 	bl	80013a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff25 	bl	8001380 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff5a 	bl	80013f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d115      	bne.n	8001572 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff3e 	bl	80013cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001550:	4b7f      	ldr	r3, [pc, #508]	@ (8001750 <HAL_ADC_Init+0x270>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	4a7f      	ldr	r2, [pc, #508]	@ (8001754 <HAL_ADC_Init+0x274>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001564:	e002      	b.n	800156c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3b01      	subs	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff3c 	bl	80013f4 <LL_ADC_IsInternalRegulatorEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff75 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 80015a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80bf 	bne.w	8001736 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 80bb 	bne.w	8001736 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015c8:	f043 0202 	orr.w	r2, r3, #2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff35 	bl	8001444 <LL_ADC_IsEnabled>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10b      	bne.n	80015f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e0:	485d      	ldr	r0, [pc, #372]	@ (8001758 <HAL_ADC_Init+0x278>)
 80015e2:	f7ff ff2f 	bl	8001444 <LL_ADC_IsEnabled>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4619      	mov	r1, r3
 80015f2:	485a      	ldr	r0, [pc, #360]	@ (800175c <HAL_ADC_Init+0x27c>)
 80015f4:	f7ff fdc0 	bl	8001178 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e5b      	ldrb	r3, [r3, #25]
 80015fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001602:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001608:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800160e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001616:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d106      	bne.n	8001634 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	045b      	lsls	r3, r3, #17
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	d009      	beq.n	8001650 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b42      	ldr	r3, [pc, #264]	@ (8001760 <HAL_ADC_Init+0x280>)
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	430b      	orrs	r3, r1
 8001662:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff25 	bl	80014b8 <LL_ADC_INJ_IsConversionOngoing>
 800166e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d13d      	bne.n	80016f2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d13a      	bne.n	80016f2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001680:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001688:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001698:	f023 0302 	bic.w	r3, r3, #2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	69b9      	ldr	r1, [r7, #24]
 80016a2:	430b      	orrs	r3, r1
 80016a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d118      	bne.n	80016e2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016cc:	4311      	orrs	r1, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016d2:	430a      	orrs	r2, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	e007      	b.n	80016f2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d10c      	bne.n	8001714 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	f023 010f 	bic.w	r1, r3, #15
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	631a      	str	r2, [r3, #48]	@ 0x30
 8001712:	e007      	b.n	8001724 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 020f 	bic.w	r2, r2, #15
 8001722:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001728:	f023 0303 	bic.w	r3, r3, #3
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	655a      	str	r2, [r3, #84]	@ 0x54
 8001734:	e007      	b.n	8001746 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001746:	7ffb      	ldrb	r3, [r7, #31]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	053e2d63 	.word	0x053e2d63
 8001758:	50040000 	.word	0x50040000
 800175c:	50040300 	.word	0x50040300
 8001760:	fff0c007 	.word	0xfff0c007

08001764 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fe8e 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	f040 80a0 	bne.w	80018be <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADC_Start_IT+0x28>
 8001788:	2302      	movs	r3, #2
 800178a:	e09b      	b.n	80018c4 <HAL_ADC_Start_IT+0x160>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fc7b 	bl	8002090 <ADC_Enable>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 8087 	bne.w	80018b4 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f023 0206 	bic.w	r2, r3, #6
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80017d2:	e002      	b.n	80017da <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	221c      	movs	r2, #28
 80017e0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 021c 	bic.w	r2, r2, #28
 80017f8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d108      	bne.n	8001814 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0208 	orr.w	r2, r2, #8
 8001810:	605a      	str	r2, [r3, #4]
          break;
 8001812:	e008      	b.n	8001826 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0204 	orr.w	r2, r2, #4
 8001822:	605a      	str	r2, [r3, #4]
          break;
 8001824:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182a:	2b00      	cmp	r3, #0
 800182c:	d107      	bne.n	800183e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0210 	orr.w	r2, r2, #16
 800183c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02d      	beq.n	80018a8 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001850:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001854:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d110      	bne.n	8001886 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0220 	bic.w	r2, r2, #32
 8001872:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001882:	605a      	str	r2, [r3, #4]
            break;
 8001884:	e010      	b.n	80018a8 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001894:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0220 	orr.w	r2, r2, #32
 80018a4:	605a      	str	r2, [r3, #4]
            break;
 80018a6:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fddc 	bl	800146a <LL_ADC_REG_StartConversion>
 80018b2:	e006      	b.n	80018c2 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80018bc:	e001      	b.n	80018c2 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018be:	2302      	movs	r3, #2
 80018c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0b6      	sub	sp, #216	@ 0xd8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x22>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e3bb      	b.n	8002066 <HAL_ADC_ConfigChannel+0x79a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fdc9 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 83a0 	bne.w	8002048 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d824      	bhi.n	8001962 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	3b02      	subs	r3, #2
 800191e:	2b03      	cmp	r3, #3
 8001920:	d81b      	bhi.n	800195a <HAL_ADC_ConfigChannel+0x8e>
 8001922:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <HAL_ADC_ConfigChannel+0x5c>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001939 	.word	0x08001939
 800192c:	08001941 	.word	0x08001941
 8001930:	08001949 	.word	0x08001949
 8001934:	08001951 	.word	0x08001951
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001938:	230c      	movs	r3, #12
 800193a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800193e:	e010      	b.n	8001962 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001940:	2312      	movs	r3, #18
 8001942:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001946:	e00c      	b.n	8001962 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001948:	2318      	movs	r3, #24
 800194a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800194e:	e008      	b.n	8001962 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001958:	e003      	b.n	8001962 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800195a:	2306      	movs	r3, #6
 800195c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001960:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001970:	f7ff fc8b 	bl	800128a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fd8a 	bl	8001492 <LL_ADC_REG_IsConversionOngoing>
 800197e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd96 	bl	80014b8 <LL_ADC_INJ_IsConversionOngoing>
 800198c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 81a4 	bne.w	8001ce2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800199a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 819f 	bne.w	8001ce2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	461a      	mov	r2, r3
 80019b2:	f7ff fc96 	bl	80012e2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00a      	beq.n	80019ee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6919      	ldr	r1, [r3, #16]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019e8:	f7ff fbfa 	bl	80011e0 <LL_ADC_SetOffset>
 80019ec:	e179      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fc17 	bl	8001228 <LL_ADC_GetOffsetChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10a      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x14e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc0c 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	e01e      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x18c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fc01 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	e004      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1a4>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	e018      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x1d6>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a94:	2320      	movs	r3, #32
 8001a96:	e004      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d106      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fbd0 	bl	8001254 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fbb4 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x214>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fba9 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 021f 	and.w	r2, r3, #31
 8001ade:	e01e      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x252>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fb9e 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e004      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x26a>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	e018      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x29c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	e004      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d106      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fb6d 	bl	8001254 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb51 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x2da>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2102      	movs	r1, #2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fb46 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	e01e      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x318>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2102      	movs	r1, #2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb3b 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e004      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x330>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	e014      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x35a>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001c0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e004      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d106      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2102      	movs	r1, #2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb0e 	bl	8001254 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff faf2 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2103      	movs	r1, #3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fae7 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	e017      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x3c8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2103      	movs	r1, #3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fadc 	bl	8001228 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c7e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001c86:	2320      	movs	r3, #32
 8001c88:	e003      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x3e0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	e011      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x404>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e003      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2103      	movs	r1, #3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fab9 	bl	8001254 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fbac 	bl	8001444 <LL_ADC_IsEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8140 	bne.w	8001f74 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	461a      	mov	r2, r3
 8001d02:	f7ff fb19 	bl	8001338 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a8f      	ldr	r2, [pc, #572]	@ (8001f48 <HAL_ADC_ConfigChannel+0x67c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	f040 8131 	bne.w	8001f74 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10b      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x46e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0e9b      	lsrs	r3, r3, #26
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	bf94      	ite	ls
 8001d32:	2301      	movls	r3, #1
 8001d34:	2300      	movhi	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	e019      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x4a2>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d52:	2320      	movs	r3, #32
 8001d54:	e003      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d079      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d107      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x4c2>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0e9b      	lsrs	r3, r3, #26
 8001d84:	3301      	adds	r3, #1
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d8c:	e015      	b.n	8001dba <HAL_ADC_ConfigChannel+0x4ee>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e003      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	069b      	lsls	r3, r3, #26
 8001db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x50e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e9b      	lsrs	r3, r3, #26
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	e017      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x53e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e003      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x564>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0e9b      	lsrs	r3, r3, #26
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 021f 	and.w	r2, r3, #31
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	051b      	lsls	r3, r3, #20
 8001e2e:	e018      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x596>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e003      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 021f 	and.w	r2, r3, #31
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e62:	430b      	orrs	r3, r1
 8001e64:	e081      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d107      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x5b6>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0e9b      	lsrs	r3, r3, #26
 8001e78:	3301      	adds	r3, #1
 8001e7a:	069b      	lsls	r3, r3, #26
 8001e7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e80:	e015      	b.n	8001eae <HAL_ADC_ConfigChannel+0x5e2>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	069b      	lsls	r3, r3, #26
 8001eaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x602>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	e017      	b.n	8001efe <HAL_ADC_ConfigChannel+0x632>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	61bb      	str	r3, [r7, #24]
  return result;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e003      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	ea42 0103 	orr.w	r1, r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x65e>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	3301      	adds	r3, #1
 8001f16:	f003 021f 	and.w	r2, r3, #31
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b1e      	subs	r3, #30
 8001f22:	051b      	lsls	r3, r3, #20
 8001f24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f28:	e01e      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x69c>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	60fb      	str	r3, [r7, #12]
  return result;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d104      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f42:	2320      	movs	r3, #32
 8001f44:	e006      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x688>
 8001f46:	bf00      	nop
 8001f48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 021f 	and.w	r2, r3, #31
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b1e      	subs	r3, #30
 8001f62:	051b      	lsls	r3, r3, #20
 8001f64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7ff f9b7 	bl	80012e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d06c      	beq.n	800205a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f80:	483c      	ldr	r0, [pc, #240]	@ (8002074 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f82:	f7ff f91f 	bl	80011c4 <LL_ADC_GetCommonPathInternalCh>
 8001f86:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8002078 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d127      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d121      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a35      	ldr	r2, [pc, #212]	@ (800207c <HAL_ADC_ConfigChannel+0x7b0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d157      	bne.n	800205a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	482f      	ldr	r0, [pc, #188]	@ (8002074 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fb6:	f7ff f8f2 	bl	800119e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	4a30      	ldr	r2, [pc, #192]	@ (8002084 <HAL_ADC_ConfigChannel+0x7b8>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe2:	e03a      	b.n	800205a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <HAL_ADC_ConfigChannel+0x7bc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d113      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ff2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_ADC_ConfigChannel+0x7b0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d12a      	bne.n	800205a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200c:	4619      	mov	r1, r3
 800200e:	4819      	ldr	r0, [pc, #100]	@ (8002074 <HAL_ADC_ConfigChannel+0x7a8>)
 8002010:	f7ff f8c5 	bl	800119e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002014:	e021      	b.n	800205a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_ADC_ConfigChannel+0x7c0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d11c      	bne.n	800205a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d116      	bne.n	800205a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <HAL_ADC_ConfigChannel+0x7b0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d111      	bne.n	800205a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800203a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <HAL_ADC_ConfigChannel+0x7a8>)
 8002042:	f7ff f8ac 	bl	800119e <LL_ADC_SetCommonPathInternalCh>
 8002046:	e008      	b.n	800205a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002062:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002066:	4618      	mov	r0, r3
 8002068:	37d8      	adds	r7, #216	@ 0xd8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	80080000 	.word	0x80080000
 8002074:	50040300 	.word	0x50040300
 8002078:	c7520000 	.word	0xc7520000
 800207c:	50040000 	.word	0x50040000
 8002080:	20000000 	.word	0x20000000
 8002084:	053e2d63 	.word	0x053e2d63
 8002088:	cb840000 	.word	0xcb840000
 800208c:	80000001 	.word	0x80000001

08002090 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f9cf 	bl	8001444 <LL_ADC_IsEnabled>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d169      	bne.n	8002180 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <ADC_Enable+0xfc>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e055      	b.n	8002182 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f99e 	bl	800141c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020e0:	482b      	ldr	r0, [pc, #172]	@ (8002190 <ADC_Enable+0x100>)
 80020e2:	f7ff f86f 	bl	80011c4 <LL_ADC_GetCommonPathInternalCh>
 80020e6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <ADC_Enable+0x104>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <ADC_Enable+0x108>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800210a:	e002      	b.n	8002112 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3b01      	subs	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002118:	f7fe fffe 	bl	8001118 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211e:	e028      	b.n	8002172 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f98d 	bl	8001444 <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f971 	bl	800141c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800213a:	f7fe ffed 	bl	8001118 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d914      	bls.n	8002172 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d00d      	beq.n	8002172 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d1cf      	bne.n	8002120 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	8000003f 	.word	0x8000003f
 8002190:	50040300 	.word	0x50040300
 8002194:	20000000 	.word	0x20000000
 8002198:	053e2d63 	.word	0x053e2d63

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	@ (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	@ (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff47 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff5c 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffb0 	bl	80022bc <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002376:	e148      	b.n	800260a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 813a 	beq.w	8002604 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_GPIO_Init+0x40>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d017      	beq.n	8002446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d123      	bne.n	800249a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8094 	beq.w	8002604 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	4b52      	ldr	r3, [pc, #328]	@ (8002628 <HAL_GPIO_Init+0x2c0>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e0:	4a51      	ldr	r2, [pc, #324]	@ (8002628 <HAL_GPIO_Init+0x2c0>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80024e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002628 <HAL_GPIO_Init+0x2c0>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f4:	4a4d      	ldr	r2, [pc, #308]	@ (800262c <HAL_GPIO_Init+0x2c4>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800251e:	d00d      	beq.n	800253c <HAL_GPIO_Init+0x1d4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a43      	ldr	r2, [pc, #268]	@ (8002630 <HAL_GPIO_Init+0x2c8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <HAL_GPIO_Init+0x1d0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a42      	ldr	r2, [pc, #264]	@ (8002634 <HAL_GPIO_Init+0x2cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d101      	bne.n	8002534 <HAL_GPIO_Init+0x1cc>
 8002530:	2302      	movs	r3, #2
 8002532:	e004      	b.n	800253e <HAL_GPIO_Init+0x1d6>
 8002534:	2307      	movs	r3, #7
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0x1d6>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_GPIO_Init+0x1d6>
 800253c:	2300      	movs	r3, #0
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	f002 0203 	and.w	r2, r2, #3
 8002544:	0092      	lsls	r2, r2, #2
 8002546:	4093      	lsls	r3, r2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800254e:	4937      	ldr	r1, [pc, #220]	@ (800262c <HAL_GPIO_Init+0x2c4>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002580:	4a2d      	ldr	r2, [pc, #180]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002586:	4b2c      	ldr	r3, [pc, #176]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025aa:	4a23      	ldr	r2, [pc, #140]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025b0:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025d4:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025da:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002638 <HAL_GPIO_Init+0x2d0>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f aeaf 	bne.w	8002378 <HAL_GPIO_Init+0x10>
  }
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000
 8002630:	48000400 	.word	0x48000400
 8002634:	48000800 	.word	0x48000800
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002658:	e002      	b.n	8002660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000

0800268c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000

080026a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b6:	d130      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b8:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c4:	d038      	beq.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2232      	movs	r2, #50	@ 0x32
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9b      	lsrs	r3, r3, #18
 80026e8:	3301      	adds	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ec:	e002      	b.n	80026f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002700:	d102      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f2      	bne.n	80026ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002714:	d110      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e00f      	b.n	800273a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002726:	d007      	beq.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002728:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002730:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002736:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40007000 	.word	0x40007000
 800274c:	20000000 	.word	0x20000000
 8002750:	431bde83 	.word	0x431bde83

08002754 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	f000 bc02 	b.w	8002f6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002768:	4b96      	ldr	r3, [pc, #600]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002772:	4b94      	ldr	r3, [pc, #592]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80e4 	beq.w	8002952 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4c>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	f040 808b 	bne.w	80028ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 8087 	bne.w	80028ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027a0:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_OscConfig+0x64>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e3d9      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	4b81      	ldr	r3, [pc, #516]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_RCC_OscConfig+0x7e>
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d0:	e005      	b.n	80027de <HAL_RCC_OscConfig+0x8a>
 80027d2:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027de:	4293      	cmp	r3, r2
 80027e0:	d223      	bcs.n	800282a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fd8c 	bl	8003304 <RCC_SetFlashLatencyFromMSIRange>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e3ba      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f6:	4b73      	ldr	r3, [pc, #460]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a72      	ldr	r2, [pc, #456]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	496d      	ldr	r1, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002814:	4b6b      	ldr	r3, [pc, #428]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	4968      	ldr	r1, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
 8002828:	e025      	b.n	8002876 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800282a:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b63      	ldr	r3, [pc, #396]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4960      	ldr	r1, [pc, #384]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002848:	4b5e      	ldr	r3, [pc, #376]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	495b      	ldr	r1, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd4c 	bl	8003304 <RCC_SetFlashLatencyFromMSIRange>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e37a      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002876:	f000 fc81 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4950      	ldr	r1, [pc, #320]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a4e      	ldr	r2, [pc, #312]	@ (80029cc <HAL_RCC_OscConfig+0x278>)
 8002894:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fbec 	bl	8001078 <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d052      	beq.n	8002950 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	e35e      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d032      	beq.n	800291c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028b6:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a42      	ldr	r2, [pc, #264]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fc29 	bl	8001118 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ca:	f7fe fc25 	bl	8001118 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e347      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028dc:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e8:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b33      	ldr	r3, [pc, #204]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4930      	ldr	r1, [pc, #192]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002906:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	492b      	ldr	r1, [pc, #172]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
 800291a:	e01a      	b.n	8002952 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800291c:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002928:	f7fe fbf6 	bl	8001118 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002930:	f7fe fbf2 	bl	8001118 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e314      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1dc>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d073      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x21c>
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d10e      	bne.n	8002988 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d10b      	bne.n	8002988 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d063      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2f0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d15f      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e2f1      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x24c>
 8002992:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0b      	ldr	r2, [pc, #44]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e025      	b.n	80029ec <HAL_RCC_OscConfig+0x298>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a8:	d114      	bne.n	80029d4 <HAL_RCC_OscConfig+0x280>
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a02      	ldr	r2, [pc, #8]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e013      	b.n	80029ec <HAL_RCC_OscConfig+0x298>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080053ac 	.word	0x080053ac
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004
 80029d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a9f      	ldr	r2, [pc, #636]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a9c      	ldr	r2, [pc, #624]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fb90 	bl	8001118 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fb8c 	bl	8001118 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e2ae      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0e:	4b92      	ldr	r3, [pc, #584]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x2a8>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fb7c 	bl	8001118 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fb78 	bl	8001118 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	@ 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e29a      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a36:	4b88      	ldr	r3, [pc, #544]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2d0>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d060      	beq.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x310>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d119      	bne.n	8002a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d116      	bne.n	8002a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a64:	4b7c      	ldr	r3, [pc, #496]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x328>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e277      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b76      	ldr	r3, [pc, #472]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	4973      	ldr	r1, [pc, #460]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	e040      	b.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fb37 	bl	8001118 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aae:	f7fe fb33 	bl	8001118 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e255      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac0:	4b65      	ldr	r3, [pc, #404]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b62      	ldr	r3, [pc, #392]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	495f      	ldr	r1, [pc, #380]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
 8002ae0:	e018      	b.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fb13 	bl	8001118 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fb0f 	bl	8001118 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e231      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b28:	4b4b      	ldr	r3, [pc, #300]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe faee 	bl	8001118 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe faea 	bl	8001118 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e20c      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3ec>
 8002b60:	e01b      	b.n	8002b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b62:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b68:	4a3b      	ldr	r2, [pc, #236]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe fad1 	bl	8001118 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe facd 	bl	8001118 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1ef      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	4b32      	ldr	r3, [pc, #200]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ef      	bne.n	8002b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a6 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	4a26      	ldr	r2, [pc, #152]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc4:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd4:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d118      	bne.n	8002c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bec:	f7fe fa94 	bl	8001118 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe fa90 	bl	8001118 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1b2      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4d8>
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	4a0d      	ldr	r2, [pc, #52]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c2a:	e029      	b.n	8002c80 <HAL_RCC_OscConfig+0x52c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d115      	bne.n	8002c60 <HAL_RCC_OscConfig+0x50c>
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	4a07      	ldr	r2, [pc, #28]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	4a03      	ldr	r2, [pc, #12]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x52c>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	4b9a      	ldr	r3, [pc, #616]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	4a99      	ldr	r2, [pc, #612]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c70:	4b96      	ldr	r3, [pc, #600]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a95      	ldr	r2, [pc, #596]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fa46 	bl	8001118 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fa42 	bl	8001118 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e162      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	4b89      	ldr	r3, [pc, #548]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ed      	beq.n	8002c90 <HAL_RCC_OscConfig+0x53c>
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fa2f 	bl	8001118 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fa2b 	bl	8001118 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e14b      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ed      	bne.n	8002cbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b78      	ldr	r3, [pc, #480]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a77      	ldr	r2, [pc, #476]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d08:	4b70      	ldr	r3, [pc, #448]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe f9fe 	bl	8001118 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d20:	f7fe f9fa 	bl	8001118 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e11c      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d32:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x5cc>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d42:	4b62      	ldr	r3, [pc, #392]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d48:	4a60      	ldr	r2, [pc, #384]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe f9e1 	bl	8001118 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d5a:	f7fe f9dd 	bl	8001118 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ff      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d6c:	4b57      	ldr	r3, [pc, #348]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80f3 	beq.w	8002f6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	f040 80c9 	bne.w	8002f20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d8e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0203 	and.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d12c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	3b01      	subs	r3, #1
 8002dae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d123      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d11b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d113      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d109      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d06b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d062      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e02:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0ac      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2d      	ldr	r2, [pc, #180]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e1e:	f7fe f97b 	bl	8001118 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fe f977 	bl	8001118 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e099      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e44:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <HAL_RCC_OscConfig+0x77c>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e54:	3a01      	subs	r2, #1
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	4311      	orrs	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e5e:	0212      	lsls	r2, r2, #8
 8002e60:	4311      	orrs	r1, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0552      	lsls	r2, r2, #21
 8002e6c:	4311      	orrs	r1, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
 8002e76:	0652      	lsls	r2, r2, #25
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e7e:	06d2      	lsls	r2, r2, #27
 8002e80:	430a      	orrs	r2, r1
 8002e82:	4912      	ldr	r1, [pc, #72]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e88:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a0c      	ldr	r2, [pc, #48]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea0:	f7fe f93a 	bl	8001118 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe f936 	bl	8001118 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e058      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <HAL_RCC_OscConfig+0x778>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec6:	e050      	b.n	8002f6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e04f      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d144      	bne.n	8002f6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eec:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a20      	ldr	r2, [pc, #128]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef8:	f7fe f90e 	bl	8001118 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe f90a 	bl	8001118 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e02c      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f12:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x7ac>
 8002f1e:	e024      	b.n	8002f6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d01f      	beq.n	8002f66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002f2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe f8f1 	bl	8001118 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe f8ed 	bl	8001118 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e00f      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4905      	ldr	r1, [pc, #20]	@ (8002f74 <HAL_RCC_OscConfig+0x820>)
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_RCC_OscConfig+0x824>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	60cb      	str	r3, [r1, #12]
 8002f64:	e001      	b.n	8002f6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	feeefffc 	.word	0xfeeefffc

08002f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0e7      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b75      	ldr	r3, [pc, #468]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d910      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b72      	ldr	r3, [pc, #456]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0207 	bic.w	r2, r3, #7
 8002fa6:	4970      	ldr	r1, [pc, #448]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b6e      	ldr	r3, [pc, #440]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0cf      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b66      	ldr	r3, [pc, #408]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d908      	bls.n	8002fee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b63      	ldr	r3, [pc, #396]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4960      	ldr	r1, [pc, #384]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04c      	beq.n	8003094 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	4b5a      	ldr	r3, [pc, #360]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d121      	bne.n	8003052 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0a6      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301a:	4b54      	ldr	r3, [pc, #336]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e09a      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003032:	4b4e      	ldr	r3, [pc, #312]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e08e      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003042:	4b4a      	ldr	r3, [pc, #296]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e086      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b46      	ldr	r3, [pc, #280]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4943      	ldr	r1, [pc, #268]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe f858 	bl	8001118 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe f854 	bl	8001118 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e06e      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b3a      	ldr	r3, [pc, #232]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d010      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b31      	ldr	r3, [pc, #196]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d208      	bcs.n	80030c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	492b      	ldr	r1, [pc, #172]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c2:	4b29      	ldr	r3, [pc, #164]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d210      	bcs.n	80030f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d0:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	4923      	ldr	r1, [pc, #140]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e0:	4b21      	ldr	r3, [pc, #132]	@ (8003168 <HAL_RCC_ClockConfig+0x1ec>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e036      	b.n	8003160 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4918      	ldr	r1, [pc, #96]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4910      	ldr	r1, [pc, #64]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003130:	f000 f824 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	490b      	ldr	r1, [pc, #44]	@ (8003170 <HAL_RCC_ClockConfig+0x1f4>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <HAL_RCC_ClockConfig+0x1f8>)
 800314e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003150:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <HAL_RCC_ClockConfig+0x1fc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd ff8f 	bl	8001078 <HAL_InitTick>
 800315a:	4603      	mov	r3, r0
 800315c:	72fb      	strb	r3, [r7, #11]

  return status;
 800315e:	7afb      	ldrb	r3, [r7, #11]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40022000 	.word	0x40022000
 800316c:	40021000 	.word	0x40021000
 8003170:	080053ac 	.word	0x080053ac
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318a:	4b3e      	ldr	r3, [pc, #248]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003194:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d121      	bne.n	80031ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d11e      	bne.n	80031ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031b0:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031bc:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e005      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031f4:	4b25      	ldr	r3, [pc, #148]	@ (800328c <HAL_RCC_GetSysClockFreq+0x110>)
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e004      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003200:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x114>)
 8003202:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d134      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800320a:	4b1e      	ldr	r3, [pc, #120]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0xa6>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d003      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0xac>
 8003220:	e005      	b.n	800322e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003222:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <HAL_RCC_GetSysClockFreq+0x110>)
 8003224:	617b      	str	r3, [r7, #20]
      break;
 8003226:	e005      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x114>)
 800322a:	617b      	str	r3, [r7, #20]
      break;
 800322c:	e002      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	617b      	str	r3, [r7, #20]
      break;
 8003232:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	3301      	adds	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	fb03 f202 	mul.w	r2, r3, r2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325a:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	0e5b      	lsrs	r3, r3, #25
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	3301      	adds	r3, #1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003274:	69bb      	ldr	r3, [r7, #24]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	@ 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	080053c4 	.word	0x080053c4
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4904      	ldr	r1, [pc, #16]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	080053bc 	.word	0x080053bc

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032dc:	f7ff ffda 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4904      	ldr	r1, [pc, #16]	@ (8003300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	080053bc 	.word	0x080053bc

08003304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003310:	4b2a      	ldr	r3, [pc, #168]	@ (80033bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800331c:	f7ff f9b6 	bl	800268c <HAL_PWREx_GetVoltageRange>
 8003320:	6178      	str	r0, [r7, #20]
 8003322:	e014      	b.n	800334e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b25      	ldr	r3, [pc, #148]	@ (80033bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	4a24      	ldr	r2, [pc, #144]	@ (80033bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003330:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800333c:	f7ff f9a6 	bl	800268c <HAL_PWREx_GetVoltageRange>
 8003340:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	4a1d      	ldr	r2, [pc, #116]	@ (80033bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003354:	d10b      	bne.n	800336e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b80      	cmp	r3, #128	@ 0x80
 800335a:	d919      	bls.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003360:	d902      	bls.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003362:	2302      	movs	r3, #2
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e013      	b.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003368:	2301      	movs	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	e010      	b.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b80      	cmp	r3, #128	@ 0x80
 8003372:	d902      	bls.n	800337a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003374:	2303      	movs	r3, #3
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e00a      	b.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b80      	cmp	r3, #128	@ 0x80
 800337e:	d102      	bne.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003380:	2302      	movs	r3, #2
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e004      	b.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b70      	cmp	r3, #112	@ 0x70
 800338a:	d101      	bne.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800338c:	2301      	movs	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 0207 	bic.w	r2, r3, #7
 8003398:	4909      	ldr	r1, [pc, #36]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033a0:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40022000 	.word	0x40022000

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033cc:	2300      	movs	r3, #0
 80033ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d0:	2300      	movs	r3, #0
 80033d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d031      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033e8:	d01a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80033ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033ee:	d814      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033f8:	d10f      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f9de 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	74fb      	strb	r3, [r7, #19]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003428:	4b51      	ldr	r3, [pc, #324]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	494e      	ldr	r1, [pc, #312]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 809e 	beq.w	800358e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003456:	4b46      	ldr	r3, [pc, #280]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	4a3f      	ldr	r2, [pc, #252]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	@ 0x58
 8003478:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003484:	2301      	movs	r3, #1
 8003486:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003488:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a39      	ldr	r2, [pc, #228]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003494:	f7fd fe40 	bl	8001118 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fd fe3c 	bl	8001118 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	74fb      	strb	r3, [r7, #19]
        break;
 80034ae:	e005      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034b0:	4b30      	ldr	r3, [pc, #192]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ef      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d15a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01e      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d019      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ea:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	4a1b      	ldr	r2, [pc, #108]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800350a:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fdfc 	bl	8001118 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003522:	e00b      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fd fdf8 	bl	8001118 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d902      	bls.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	74fb      	strb	r3, [r7, #19]
            break;
 800353a:	e006      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353c:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0ec      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003550:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355e:	4904      	ldr	r1, [pc, #16]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003566:	e009      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357c:	7c7b      	ldrb	r3, [r7, #17]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003582:	4b8a      	ldr	r3, [pc, #552]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	4a89      	ldr	r2, [pc, #548]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359a:	4b84      	ldr	r3, [pc, #528]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a0:	f023 0203 	bic.w	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4980      	ldr	r1, [pc, #512]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035bc:	4b7b      	ldr	r3, [pc, #492]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 020c 	bic.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	4978      	ldr	r1, [pc, #480]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035de:	4b73      	ldr	r3, [pc, #460]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	496f      	ldr	r1, [pc, #444]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003600:	4b6a      	ldr	r3, [pc, #424]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003606:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360e:	4967      	ldr	r1, [pc, #412]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003622:	4b62      	ldr	r3, [pc, #392]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	495e      	ldr	r1, [pc, #376]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003644:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	4956      	ldr	r1, [pc, #344]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003666:	4b51      	ldr	r3, [pc, #324]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	494d      	ldr	r1, [pc, #308]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d028      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003688:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	4945      	ldr	r1, [pc, #276]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a6:	d106      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b40      	ldr	r3, [pc, #256]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a3f      	ldr	r2, [pc, #252]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	e011      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036be:	d10c      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	2101      	movs	r1, #1
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f882 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d028      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036e6:	4b31      	ldr	r3, [pc, #196]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	492d      	ldr	r1, [pc, #180]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003704:	d106      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003706:	4b29      	ldr	r3, [pc, #164]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003710:	60d3      	str	r3, [r2, #12]
 8003712:	e011      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800371c:	d10c      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f853 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01c      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003752:	4916      	ldr	r1, [pc, #88]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003762:	d10c      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f830 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003798:	4904      	ldr	r1, [pc, #16]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000

080037b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000

080037d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037de:	4b74      	ldr	r3, [pc, #464]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ea:	4b71      	ldr	r3, [pc, #452]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10d      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
       ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003802:	4b6b      	ldr	r3, [pc, #428]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
       ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d047      	beq.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e044      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d018      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x86>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d825      	bhi.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x62>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d009      	beq.n	8003844 <RCCEx_PLLSAI1_Config+0x74>
 8003830:	e020      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003832:	4b5f      	ldr	r3, [pc, #380]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e01a      	b.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b5a      	ldr	r3, [pc, #360]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e013      	b.n	800387e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003856:	4b56      	ldr	r3, [pc, #344]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003862:	4b53      	ldr	r3, [pc, #332]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003872:	e006      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e004      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003882:	bf00      	nop
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388a:	4b49      	ldr	r3, [pc, #292]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	430b      	orrs	r3, r1
 80038a0:	4943      	ldr	r1, [pc, #268]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d17c      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038ac:	4b40      	ldr	r3, [pc, #256]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a3f      	ldr	r2, [pc, #252]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd fc2e 	bl	8001118 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038be:	e009      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c0:	f7fd fc2a 	bl	8001118 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	73fb      	strb	r3, [r7, #15]
        break;
 80038d2:	e005      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d4:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d15f      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d110      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ec:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80038f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	0211      	lsls	r1, r2, #8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	06d2      	lsls	r2, r2, #27
 8003904:	430a      	orrs	r2, r1
 8003906:	492a      	ldr	r1, [pc, #168]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]
 800390c:	e027      	b.n	800395e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d112      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003914:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800391c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6892      	ldr	r2, [r2, #8]
 8003924:	0211      	lsls	r1, r2, #8
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6912      	ldr	r2, [r2, #16]
 800392a:	0852      	lsrs	r2, r2, #1
 800392c:	3a01      	subs	r2, #1
 800392e:	0552      	lsls	r2, r2, #21
 8003930:	430a      	orrs	r2, r1
 8003932:	491f      	ldr	r1, [pc, #124]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	610b      	str	r3, [r1, #16]
 8003938:	e011      	b.n	800395e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003942:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6892      	ldr	r2, [r2, #8]
 800394a:	0211      	lsls	r1, r2, #8
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6952      	ldr	r2, [r2, #20]
 8003950:	0852      	lsrs	r2, r2, #1
 8003952:	3a01      	subs	r2, #1
 8003954:	0652      	lsls	r2, r2, #25
 8003956:	430a      	orrs	r2, r1
 8003958:	4915      	ldr	r1, [pc, #84]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800395e:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003964:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003968:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd fbd5 	bl	8001118 <HAL_GetTick>
 800396e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003970:	e009      	b.n	8003986 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003972:	f7fd fbd1 	bl	8001118 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d902      	bls.n	8003986 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	73fb      	strb	r3, [r7, #15]
          break;
 8003984:	e005      	b.n	8003992 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0ef      	beq.n	8003972 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	4903      	ldr	r1, [pc, #12]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e040      	b.n	8003a48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd f9be 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	@ 0x24
 80039e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fade 	bl	8003fbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f8af 	bl	8003b64 <UART_SetConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e01b      	b.n	8003a48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fb5d 	bl	8004100 <UART_CheckIdleState>
 8003a46:	4603      	mov	r3, r0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d177      	bne.n	8003b58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Transmit+0x24>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e070      	b.n	8003b5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2221      	movs	r2, #33	@ 0x21
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a86:	f7fd fb47 	bl	8001118 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa4:	d108      	bne.n	8003ab8 <HAL_UART_Transmit+0x68>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e003      	b.n	8003ac0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac0:	e02f      	b.n	8003b22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	@ 0x80
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fbbf 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e03b      	b.n	8003b5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	b292      	uxth	r2, r2
 8003af6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	3302      	adds	r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e007      	b.n	8003b10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1c9      	bne.n	8003ac2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2140      	movs	r1, #64	@ 0x40
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fb89 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e005      	b.n	8003b5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b68:	b08a      	sub	sp, #40	@ 0x28
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4bb4      	ldr	r3, [pc, #720]	@ (8003e64 <UART_SetConfig+0x300>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4aa9      	ldr	r2, [pc, #676]	@ (8003e68 <UART_SetConfig+0x304>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be0:	430a      	orrs	r2, r1
 8003be2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4aa0      	ldr	r2, [pc, #640]	@ (8003e6c <UART_SetConfig+0x308>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d126      	bne.n	8003c3c <UART_SetConfig+0xd8>
 8003bee:	4ba0      	ldr	r3, [pc, #640]	@ (8003e70 <UART_SetConfig+0x30c>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d81b      	bhi.n	8003c34 <UART_SetConfig+0xd0>
 8003bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003c04 <UART_SetConfig+0xa0>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c25 	.word	0x08003c25
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c2d 	.word	0x08003c2d
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e080      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c22:	e07c      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003c24:	2304      	movs	r3, #4
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2a:	e078      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c32:	e074      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003c34:	2310      	movs	r3, #16
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3a:	e070      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a8c      	ldr	r2, [pc, #560]	@ (8003e74 <UART_SetConfig+0x310>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d138      	bne.n	8003cb8 <UART_SetConfig+0x154>
 8003c46:	4b8a      	ldr	r3, [pc, #552]	@ (8003e70 <UART_SetConfig+0x30c>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	d82d      	bhi.n	8003cb0 <UART_SetConfig+0x14c>
 8003c54:	a201      	add	r2, pc, #4	@ (adr r2, 8003c5c <UART_SetConfig+0xf8>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003cb1 	.word	0x08003cb1
 8003c68:	08003cb1 	.word	0x08003cb1
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb1 	.word	0x08003cb1
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	08003cb1 	.word	0x08003cb1
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	08003ca9 	.word	0x08003ca9
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c96:	e042      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9e:	e03e      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca6:	e03a      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cae:	e036      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb6:	e032      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8003e68 <UART_SetConfig+0x304>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d12a      	bne.n	8003d18 <UART_SetConfig+0x1b4>
 8003cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003e70 <UART_SetConfig+0x30c>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ccc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cd0:	d01a      	beq.n	8003d08 <UART_SetConfig+0x1a4>
 8003cd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cd6:	d81b      	bhi.n	8003d10 <UART_SetConfig+0x1ac>
 8003cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cdc:	d00c      	beq.n	8003cf8 <UART_SetConfig+0x194>
 8003cde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce2:	d815      	bhi.n	8003d10 <UART_SetConfig+0x1ac>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <UART_SetConfig+0x18c>
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cec:	d008      	beq.n	8003d00 <UART_SetConfig+0x19c>
 8003cee:	e00f      	b.n	8003d10 <UART_SetConfig+0x1ac>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e012      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e00e      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003d00:	2304      	movs	r3, #4
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e00a      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0e:	e006      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003d10:	2310      	movs	r3, #16
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d16:	e002      	b.n	8003d1e <UART_SetConfig+0x1ba>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a51      	ldr	r2, [pc, #324]	@ (8003e68 <UART_SetConfig+0x304>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d17a      	bne.n	8003e1e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d824      	bhi.n	8003d7a <UART_SetConfig+0x216>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <UART_SetConfig+0x1d4>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d5d 	.word	0x08003d5d
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d6b 	.word	0x08003d6b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d7b 	.word	0x08003d7b
 8003d54:	08003d7b 	.word	0x08003d7b
 8003d58:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f7ff faa6 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003d60:	61f8      	str	r0, [r7, #28]
        break;
 8003d62:	e010      	b.n	8003d86 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b44      	ldr	r3, [pc, #272]	@ (8003e78 <UART_SetConfig+0x314>)
 8003d66:	61fb      	str	r3, [r7, #28]
        break;
 8003d68:	e00d      	b.n	8003d86 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7ff fa07 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003d6e:	61f8      	str	r0, [r7, #28]
        break;
 8003d70:	e009      	b.n	8003d86 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d76:	61fb      	str	r3, [r7, #28]
        break;
 8003d78:	e005      	b.n	8003d86 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8107 	beq.w	8003f9c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d305      	bcc.n	8003daa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d903      	bls.n	8003db2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003db0:	e0f4      	b.n	8003f9c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2200      	movs	r2, #0
 8003db6:	461c      	mov	r4, r3
 8003db8:	4615      	mov	r5, r2
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	022b      	lsls	r3, r5, #8
 8003dc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dc8:	0222      	lsls	r2, r4, #8
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	6849      	ldr	r1, [r1, #4]
 8003dce:	0849      	lsrs	r1, r1, #1
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4688      	mov	r8, r1
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	eb12 0a08 	adds.w	sl, r2, r8
 8003dda:	eb43 0b09 	adc.w	fp, r3, r9
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dec:	4650      	mov	r0, sl
 8003dee:	4659      	mov	r1, fp
 8003df0:	f7fc fbfa 	bl	80005e8 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e02:	d308      	bcc.n	8003e16 <UART_SetConfig+0x2b2>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e0a:	d204      	bcs.n	8003e16 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e0c2      	b.n	8003f9c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e1c:	e0be      	b.n	8003f9c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e26:	d16a      	bne.n	8003efe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003e28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d834      	bhi.n	8003e9a <UART_SetConfig+0x336>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x2d4>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e85 	.word	0x08003e85
 8003e44:	08003e9b 	.word	0x08003e9b
 8003e48:	08003e8b 	.word	0x08003e8b
 8003e4c:	08003e9b 	.word	0x08003e9b
 8003e50:	08003e9b 	.word	0x08003e9b
 8003e54:	08003e9b 	.word	0x08003e9b
 8003e58:	08003e93 	.word	0x08003e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7ff fa26 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003e60:	61f8      	str	r0, [r7, #28]
        break;
 8003e62:	e020      	b.n	8003ea6 <UART_SetConfig+0x342>
 8003e64:	efff69f3 	.word	0xefff69f3
 8003e68:	40008000 	.word	0x40008000
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40004400 	.word	0x40004400
 8003e78:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e7c:	f7ff fa2c 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003e80:	61f8      	str	r0, [r7, #28]
        break;
 8003e82:	e010      	b.n	8003ea6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e84:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb8 <UART_SetConfig+0x454>)
 8003e86:	61fb      	str	r3, [r7, #28]
        break;
 8003e88:	e00d      	b.n	8003ea6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8a:	f7ff f977 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003e8e:	61f8      	str	r0, [r7, #28]
        break;
 8003e90:	e009      	b.n	8003ea6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e96:	61fb      	str	r3, [r7, #28]
        break;
 8003e98:	e005      	b.n	8003ea6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d077      	beq.n	8003f9c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005a      	lsls	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b0f      	cmp	r3, #15
 8003ec6:	d916      	bls.n	8003ef6 <UART_SetConfig+0x392>
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ece:	d212      	bcs.n	8003ef6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f023 030f 	bic.w	r3, r3, #15
 8003ed8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	8afa      	ldrh	r2, [r7, #22]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e052      	b.n	8003f9c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003efc:	e04e      	b.n	8003f9c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003efe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d827      	bhi.n	8003f56 <UART_SetConfig+0x3f2>
 8003f06:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <UART_SetConfig+0x3a8>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	08003f57 	.word	0x08003f57
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	08003f4f 	.word	0x08003f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7ff f9bc 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003f34:	61f8      	str	r0, [r7, #28]
        break;
 8003f36:	e014      	b.n	8003f62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7ff f9ce 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	61f8      	str	r0, [r7, #28]
        break;
 8003f3e:	e010      	b.n	8003f62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <UART_SetConfig+0x454>)
 8003f42:	61fb      	str	r3, [r7, #28]
        break;
 8003f44:	e00d      	b.n	8003f62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7ff f919 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003f4a:	61f8      	str	r0, [r7, #28]
        break;
 8003f4c:	e009      	b.n	8003f62 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f52:	61fb      	str	r3, [r7, #28]
        break;
 8003f54:	e005      	b.n	8003f62 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f60:	bf00      	nop
    }

    if (pclk != 0U)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d019      	beq.n	8003f9c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	085a      	lsrs	r2, r3, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d909      	bls.n	8003f96 <UART_SetConfig+0x432>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f88:	d205      	bcs.n	8003f96 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e002      	b.n	8003f9c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fa8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3728      	adds	r7, #40	@ 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb6:	bf00      	nop
 8003fb8:	00f42400 	.word	0x00f42400

08003fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01a      	beq.n	80040d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ba:	d10a      	bne.n	80040d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b098      	sub	sp, #96	@ 0x60
 8004104:	af02      	add	r7, sp, #8
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004110:	f7fd f802 	bl	8001118 <HAL_GetTick>
 8004114:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d12e      	bne.n	8004182 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	2200      	movs	r2, #0
 800412e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f88c 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d021      	beq.n	8004182 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004152:	653b      	str	r3, [r7, #80]	@ 0x50
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
 800415e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800416a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e6      	bne.n	800413e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e062      	b.n	8004248 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d149      	bne.n	8004224 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	2200      	movs	r2, #0
 800419a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f856 	bl	8004250 <UART_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03c      	beq.n	8004224 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	623b      	str	r3, [r7, #32]
   return(result);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3308      	adds	r3, #8
 80041fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041fc:	61fa      	str	r2, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	617b      	str	r3, [r7, #20]
   return(result);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e5      	bne.n	80041dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e011      	b.n	8004248 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3758      	adds	r7, #88	@ 0x58
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004260:	e04f      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d04b      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fc ff55 	bl	8001118 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <UART_WaitOnFlagUntilTimeout+0x30>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e04e      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d037      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b80      	cmp	r3, #128	@ 0x80
 8004296:	d034      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d031      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d110      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2208      	movs	r2, #8
 80042b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f838 	bl	800432a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2208      	movs	r2, #8
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e029      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042dc:	d111      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f81e 	bl	800432a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e00f      	b.n	8004322 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	429a      	cmp	r2, r3
 800431e:	d0a0      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432a:	b480      	push	{r7}
 800432c:	b095      	sub	sp, #84	@ 0x54
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004350:	643b      	str	r3, [r7, #64]	@ 0x40
 8004352:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	61fb      	str	r3, [r7, #28]
   return(result);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800438a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439c:	2b01      	cmp	r3, #1
 800439e:	d118      	bne.n	80043d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6979      	ldr	r1, [r7, #20]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	613b      	str	r3, [r7, #16]
   return(result);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e6      	bne.n	80043a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043e6:	bf00      	nop
 80043e8:	3754      	adds	r7, #84	@ 0x54
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <std>:
 80043f4:	2300      	movs	r3, #0
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	e9c0 3300 	strd	r3, r3, [r0]
 80043fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004402:	6083      	str	r3, [r0, #8]
 8004404:	8181      	strh	r1, [r0, #12]
 8004406:	6643      	str	r3, [r0, #100]	@ 0x64
 8004408:	81c2      	strh	r2, [r0, #14]
 800440a:	6183      	str	r3, [r0, #24]
 800440c:	4619      	mov	r1, r3
 800440e:	2208      	movs	r2, #8
 8004410:	305c      	adds	r0, #92	@ 0x5c
 8004412:	f000 fa01 	bl	8004818 <memset>
 8004416:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <std+0x58>)
 8004418:	6263      	str	r3, [r4, #36]	@ 0x24
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <std+0x5c>)
 800441c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <std+0x60>)
 8004420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <std+0x64>)
 8004424:	6323      	str	r3, [r4, #48]	@ 0x30
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <std+0x68>)
 8004428:	6224      	str	r4, [r4, #32]
 800442a:	429c      	cmp	r4, r3
 800442c:	d006      	beq.n	800443c <std+0x48>
 800442e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004432:	4294      	cmp	r4, r2
 8004434:	d002      	beq.n	800443c <std+0x48>
 8004436:	33d0      	adds	r3, #208	@ 0xd0
 8004438:	429c      	cmp	r4, r3
 800443a:	d105      	bne.n	8004448 <std+0x54>
 800443c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f000 ba60 	b.w	8004908 <__retarget_lock_init_recursive>
 8004448:	bd10      	pop	{r4, pc}
 800444a:	bf00      	nop
 800444c:	08004669 	.word	0x08004669
 8004450:	0800468b 	.word	0x0800468b
 8004454:	080046c3 	.word	0x080046c3
 8004458:	080046e7 	.word	0x080046e7
 800445c:	2000057c 	.word	0x2000057c

08004460 <stdio_exit_handler>:
 8004460:	4a02      	ldr	r2, [pc, #8]	@ (800446c <stdio_exit_handler+0xc>)
 8004462:	4903      	ldr	r1, [pc, #12]	@ (8004470 <stdio_exit_handler+0x10>)
 8004464:	4803      	ldr	r0, [pc, #12]	@ (8004474 <stdio_exit_handler+0x14>)
 8004466:	f000 b869 	b.w	800453c <_fwalk_sglue>
 800446a:	bf00      	nop
 800446c:	2000000c 	.word	0x2000000c
 8004470:	080051a9 	.word	0x080051a9
 8004474:	2000001c 	.word	0x2000001c

08004478 <cleanup_stdio>:
 8004478:	6841      	ldr	r1, [r0, #4]
 800447a:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <cleanup_stdio+0x34>)
 800447c:	4299      	cmp	r1, r3
 800447e:	b510      	push	{r4, lr}
 8004480:	4604      	mov	r4, r0
 8004482:	d001      	beq.n	8004488 <cleanup_stdio+0x10>
 8004484:	f000 fe90 	bl	80051a8 <_fflush_r>
 8004488:	68a1      	ldr	r1, [r4, #8]
 800448a:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <cleanup_stdio+0x38>)
 800448c:	4299      	cmp	r1, r3
 800448e:	d002      	beq.n	8004496 <cleanup_stdio+0x1e>
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fe89 	bl	80051a8 <_fflush_r>
 8004496:	68e1      	ldr	r1, [r4, #12]
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <cleanup_stdio+0x3c>)
 800449a:	4299      	cmp	r1, r3
 800449c:	d004      	beq.n	80044a8 <cleanup_stdio+0x30>
 800449e:	4620      	mov	r0, r4
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a4:	f000 be80 	b.w	80051a8 <_fflush_r>
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	bf00      	nop
 80044ac:	2000057c 	.word	0x2000057c
 80044b0:	200005e4 	.word	0x200005e4
 80044b4:	2000064c 	.word	0x2000064c

080044b8 <global_stdio_init.part.0>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <global_stdio_init.part.0+0x30>)
 80044bc:	4c0b      	ldr	r4, [pc, #44]	@ (80044ec <global_stdio_init.part.0+0x34>)
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <global_stdio_init.part.0+0x38>)
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	4620      	mov	r0, r4
 80044c4:	2200      	movs	r2, #0
 80044c6:	2104      	movs	r1, #4
 80044c8:	f7ff ff94 	bl	80043f4 <std>
 80044cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044d0:	2201      	movs	r2, #1
 80044d2:	2109      	movs	r1, #9
 80044d4:	f7ff ff8e 	bl	80043f4 <std>
 80044d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044dc:	2202      	movs	r2, #2
 80044de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044e2:	2112      	movs	r1, #18
 80044e4:	f7ff bf86 	b.w	80043f4 <std>
 80044e8:	200006b4 	.word	0x200006b4
 80044ec:	2000057c 	.word	0x2000057c
 80044f0:	08004461 	.word	0x08004461

080044f4 <__sfp_lock_acquire>:
 80044f4:	4801      	ldr	r0, [pc, #4]	@ (80044fc <__sfp_lock_acquire+0x8>)
 80044f6:	f000 ba08 	b.w	800490a <__retarget_lock_acquire_recursive>
 80044fa:	bf00      	nop
 80044fc:	200006bd 	.word	0x200006bd

08004500 <__sfp_lock_release>:
 8004500:	4801      	ldr	r0, [pc, #4]	@ (8004508 <__sfp_lock_release+0x8>)
 8004502:	f000 ba03 	b.w	800490c <__retarget_lock_release_recursive>
 8004506:	bf00      	nop
 8004508:	200006bd 	.word	0x200006bd

0800450c <__sinit>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4604      	mov	r4, r0
 8004510:	f7ff fff0 	bl	80044f4 <__sfp_lock_acquire>
 8004514:	6a23      	ldr	r3, [r4, #32]
 8004516:	b11b      	cbz	r3, 8004520 <__sinit+0x14>
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	f7ff bff0 	b.w	8004500 <__sfp_lock_release>
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <__sinit+0x28>)
 8004522:	6223      	str	r3, [r4, #32]
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <__sinit+0x2c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f5      	bne.n	8004518 <__sinit+0xc>
 800452c:	f7ff ffc4 	bl	80044b8 <global_stdio_init.part.0>
 8004530:	e7f2      	b.n	8004518 <__sinit+0xc>
 8004532:	bf00      	nop
 8004534:	08004479 	.word	0x08004479
 8004538:	200006b4 	.word	0x200006b4

0800453c <_fwalk_sglue>:
 800453c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004540:	4607      	mov	r7, r0
 8004542:	4688      	mov	r8, r1
 8004544:	4614      	mov	r4, r2
 8004546:	2600      	movs	r6, #0
 8004548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800454c:	f1b9 0901 	subs.w	r9, r9, #1
 8004550:	d505      	bpl.n	800455e <_fwalk_sglue+0x22>
 8004552:	6824      	ldr	r4, [r4, #0]
 8004554:	2c00      	cmp	r4, #0
 8004556:	d1f7      	bne.n	8004548 <_fwalk_sglue+0xc>
 8004558:	4630      	mov	r0, r6
 800455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d907      	bls.n	8004574 <_fwalk_sglue+0x38>
 8004564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004568:	3301      	adds	r3, #1
 800456a:	d003      	beq.n	8004574 <_fwalk_sglue+0x38>
 800456c:	4629      	mov	r1, r5
 800456e:	4638      	mov	r0, r7
 8004570:	47c0      	blx	r8
 8004572:	4306      	orrs	r6, r0
 8004574:	3568      	adds	r5, #104	@ 0x68
 8004576:	e7e9      	b.n	800454c <_fwalk_sglue+0x10>

08004578 <iprintf>:
 8004578:	b40f      	push	{r0, r1, r2, r3}
 800457a:	b507      	push	{r0, r1, r2, lr}
 800457c:	4906      	ldr	r1, [pc, #24]	@ (8004598 <iprintf+0x20>)
 800457e:	ab04      	add	r3, sp, #16
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	f853 2b04 	ldr.w	r2, [r3], #4
 8004586:	6881      	ldr	r1, [r0, #8]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	f000 fae3 	bl	8004b54 <_vfiprintf_r>
 800458e:	b003      	add	sp, #12
 8004590:	f85d eb04 	ldr.w	lr, [sp], #4
 8004594:	b004      	add	sp, #16
 8004596:	4770      	bx	lr
 8004598:	20000018 	.word	0x20000018

0800459c <putchar>:
 800459c:	4b02      	ldr	r3, [pc, #8]	@ (80045a8 <putchar+0xc>)
 800459e:	4601      	mov	r1, r0
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	6882      	ldr	r2, [r0, #8]
 80045a4:	f000 be8a 	b.w	80052bc <_putc_r>
 80045a8:	20000018 	.word	0x20000018

080045ac <_puts_r>:
 80045ac:	6a03      	ldr	r3, [r0, #32]
 80045ae:	b570      	push	{r4, r5, r6, lr}
 80045b0:	6884      	ldr	r4, [r0, #8]
 80045b2:	4605      	mov	r5, r0
 80045b4:	460e      	mov	r6, r1
 80045b6:	b90b      	cbnz	r3, 80045bc <_puts_r+0x10>
 80045b8:	f7ff ffa8 	bl	800450c <__sinit>
 80045bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045be:	07db      	lsls	r3, r3, #31
 80045c0:	d405      	bmi.n	80045ce <_puts_r+0x22>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	0598      	lsls	r0, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_puts_r+0x22>
 80045c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ca:	f000 f99e 	bl	800490a <__retarget_lock_acquire_recursive>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	0719      	lsls	r1, r3, #28
 80045d2:	d502      	bpl.n	80045da <_puts_r+0x2e>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d135      	bne.n	8004646 <_puts_r+0x9a>
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 f8c5 	bl	800476c <__swsetup_r>
 80045e2:	b380      	cbz	r0, 8004646 <_puts_r+0x9a>
 80045e4:	f04f 35ff 	mov.w	r5, #4294967295
 80045e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045ea:	07da      	lsls	r2, r3, #31
 80045ec:	d405      	bmi.n	80045fa <_puts_r+0x4e>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	059b      	lsls	r3, r3, #22
 80045f2:	d402      	bmi.n	80045fa <_puts_r+0x4e>
 80045f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045f6:	f000 f989 	bl	800490c <__retarget_lock_release_recursive>
 80045fa:	4628      	mov	r0, r5
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da04      	bge.n	800460c <_puts_r+0x60>
 8004602:	69a2      	ldr	r2, [r4, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	dc17      	bgt.n	8004638 <_puts_r+0x8c>
 8004608:	290a      	cmp	r1, #10
 800460a:	d015      	beq.n	8004638 <_puts_r+0x8c>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	7019      	strb	r1, [r3, #0]
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800461a:	3b01      	subs	r3, #1
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	2900      	cmp	r1, #0
 8004620:	d1ed      	bne.n	80045fe <_puts_r+0x52>
 8004622:	2b00      	cmp	r3, #0
 8004624:	da11      	bge.n	800464a <_puts_r+0x9e>
 8004626:	4622      	mov	r2, r4
 8004628:	210a      	movs	r1, #10
 800462a:	4628      	mov	r0, r5
 800462c:	f000 f85f 	bl	80046ee <__swbuf_r>
 8004630:	3001      	adds	r0, #1
 8004632:	d0d7      	beq.n	80045e4 <_puts_r+0x38>
 8004634:	250a      	movs	r5, #10
 8004636:	e7d7      	b.n	80045e8 <_puts_r+0x3c>
 8004638:	4622      	mov	r2, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f857 	bl	80046ee <__swbuf_r>
 8004640:	3001      	adds	r0, #1
 8004642:	d1e7      	bne.n	8004614 <_puts_r+0x68>
 8004644:	e7ce      	b.n	80045e4 <_puts_r+0x38>
 8004646:	3e01      	subs	r6, #1
 8004648:	e7e4      	b.n	8004614 <_puts_r+0x68>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	6022      	str	r2, [r4, #0]
 8004650:	220a      	movs	r2, #10
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e7ee      	b.n	8004634 <_puts_r+0x88>
	...

08004658 <puts>:
 8004658:	4b02      	ldr	r3, [pc, #8]	@ (8004664 <puts+0xc>)
 800465a:	4601      	mov	r1, r0
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	f7ff bfa5 	b.w	80045ac <_puts_r>
 8004662:	bf00      	nop
 8004664:	20000018 	.word	0x20000018

08004668 <__sread>:
 8004668:	b510      	push	{r4, lr}
 800466a:	460c      	mov	r4, r1
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	f000 f8fc 	bl	800486c <_read_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	bfab      	itete	ge
 8004678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800467a:	89a3      	ldrhlt	r3, [r4, #12]
 800467c:	181b      	addge	r3, r3, r0
 800467e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004682:	bfac      	ite	ge
 8004684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004686:	81a3      	strhlt	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__swrite>:
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	461f      	mov	r7, r3
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	05db      	lsls	r3, r3, #23
 8004694:	4605      	mov	r5, r0
 8004696:	460c      	mov	r4, r1
 8004698:	4616      	mov	r6, r2
 800469a:	d505      	bpl.n	80046a8 <__swrite+0x1e>
 800469c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a0:	2302      	movs	r3, #2
 80046a2:	2200      	movs	r2, #0
 80046a4:	f000 f8d0 	bl	8004848 <_lseek_r>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	4632      	mov	r2, r6
 80046b6:	463b      	mov	r3, r7
 80046b8:	4628      	mov	r0, r5
 80046ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	f000 b8e7 	b.w	8004890 <_write_r>

080046c2 <__sseek>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	460c      	mov	r4, r1
 80046c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ca:	f000 f8bd 	bl	8004848 <_lseek_r>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	bf15      	itete	ne
 80046d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046de:	81a3      	strheq	r3, [r4, #12]
 80046e0:	bf18      	it	ne
 80046e2:	81a3      	strhne	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__sclose>:
 80046e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ea:	f000 b89d 	b.w	8004828 <_close_r>

080046ee <__swbuf_r>:
 80046ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f0:	460e      	mov	r6, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	4605      	mov	r5, r0
 80046f6:	b118      	cbz	r0, 8004700 <__swbuf_r+0x12>
 80046f8:	6a03      	ldr	r3, [r0, #32]
 80046fa:	b90b      	cbnz	r3, 8004700 <__swbuf_r+0x12>
 80046fc:	f7ff ff06 	bl	800450c <__sinit>
 8004700:	69a3      	ldr	r3, [r4, #24]
 8004702:	60a3      	str	r3, [r4, #8]
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	071a      	lsls	r2, r3, #28
 8004708:	d501      	bpl.n	800470e <__swbuf_r+0x20>
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	b943      	cbnz	r3, 8004720 <__swbuf_r+0x32>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 f82b 	bl	800476c <__swsetup_r>
 8004716:	b118      	cbz	r0, 8004720 <__swbuf_r+0x32>
 8004718:	f04f 37ff 	mov.w	r7, #4294967295
 800471c:	4638      	mov	r0, r7
 800471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	6922      	ldr	r2, [r4, #16]
 8004724:	1a98      	subs	r0, r3, r2
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	b2f6      	uxtb	r6, r6
 800472a:	4283      	cmp	r3, r0
 800472c:	4637      	mov	r7, r6
 800472e:	dc05      	bgt.n	800473c <__swbuf_r+0x4e>
 8004730:	4621      	mov	r1, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 fd38 	bl	80051a8 <_fflush_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	d1ed      	bne.n	8004718 <__swbuf_r+0x2a>
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	3b01      	subs	r3, #1
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	701e      	strb	r6, [r3, #0]
 800474a:	6962      	ldr	r2, [r4, #20]
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	429a      	cmp	r2, r3
 8004750:	d004      	beq.n	800475c <__swbuf_r+0x6e>
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d5e1      	bpl.n	800471c <__swbuf_r+0x2e>
 8004758:	2e0a      	cmp	r6, #10
 800475a:	d1df      	bne.n	800471c <__swbuf_r+0x2e>
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	f000 fd22 	bl	80051a8 <_fflush_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	d0d9      	beq.n	800471c <__swbuf_r+0x2e>
 8004768:	e7d6      	b.n	8004718 <__swbuf_r+0x2a>
	...

0800476c <__swsetup_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <__swsetup_r+0xa8>)
 8004770:	4605      	mov	r5, r0
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	460c      	mov	r4, r1
 8004776:	b118      	cbz	r0, 8004780 <__swsetup_r+0x14>
 8004778:	6a03      	ldr	r3, [r0, #32]
 800477a:	b90b      	cbnz	r3, 8004780 <__swsetup_r+0x14>
 800477c:	f7ff fec6 	bl	800450c <__sinit>
 8004780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	d422      	bmi.n	80047ce <__swsetup_r+0x62>
 8004788:	06da      	lsls	r2, r3, #27
 800478a:	d407      	bmi.n	800479c <__swsetup_r+0x30>
 800478c:	2209      	movs	r2, #9
 800478e:	602a      	str	r2, [r5, #0]
 8004790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004794:	81a3      	strh	r3, [r4, #12]
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	e033      	b.n	8004804 <__swsetup_r+0x98>
 800479c:	0758      	lsls	r0, r3, #29
 800479e:	d512      	bpl.n	80047c6 <__swsetup_r+0x5a>
 80047a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047a2:	b141      	cbz	r1, 80047b6 <__swsetup_r+0x4a>
 80047a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d002      	beq.n	80047b2 <__swsetup_r+0x46>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f8af 	bl	8004910 <_free_r>
 80047b2:	2300      	movs	r3, #0
 80047b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047bc:	81a3      	strh	r3, [r4, #12]
 80047be:	2300      	movs	r3, #0
 80047c0:	6063      	str	r3, [r4, #4]
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f043 0308 	orr.w	r3, r3, #8
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	b94b      	cbnz	r3, 80047e6 <__swsetup_r+0x7a>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047dc:	d003      	beq.n	80047e6 <__swsetup_r+0x7a>
 80047de:	4621      	mov	r1, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 fd2f 	bl	8005244 <__smakebuf_r>
 80047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ea:	f013 0201 	ands.w	r2, r3, #1
 80047ee:	d00a      	beq.n	8004806 <__swsetup_r+0x9a>
 80047f0:	2200      	movs	r2, #0
 80047f2:	60a2      	str	r2, [r4, #8]
 80047f4:	6962      	ldr	r2, [r4, #20]
 80047f6:	4252      	negs	r2, r2
 80047f8:	61a2      	str	r2, [r4, #24]
 80047fa:	6922      	ldr	r2, [r4, #16]
 80047fc:	b942      	cbnz	r2, 8004810 <__swsetup_r+0xa4>
 80047fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004802:	d1c5      	bne.n	8004790 <__swsetup_r+0x24>
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	0799      	lsls	r1, r3, #30
 8004808:	bf58      	it	pl
 800480a:	6962      	ldrpl	r2, [r4, #20]
 800480c:	60a2      	str	r2, [r4, #8]
 800480e:	e7f4      	b.n	80047fa <__swsetup_r+0x8e>
 8004810:	2000      	movs	r0, #0
 8004812:	e7f7      	b.n	8004804 <__swsetup_r+0x98>
 8004814:	20000018 	.word	0x20000018

08004818 <memset>:
 8004818:	4402      	add	r2, r0
 800481a:	4603      	mov	r3, r0
 800481c:	4293      	cmp	r3, r2
 800481e:	d100      	bne.n	8004822 <memset+0xa>
 8004820:	4770      	bx	lr
 8004822:	f803 1b01 	strb.w	r1, [r3], #1
 8004826:	e7f9      	b.n	800481c <memset+0x4>

08004828 <_close_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4d06      	ldr	r5, [pc, #24]	@ (8004844 <_close_r+0x1c>)
 800482c:	2300      	movs	r3, #0
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	602b      	str	r3, [r5, #0]
 8004834:	f7fc fb62 	bl	8000efc <_close>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_close_r+0x1a>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_close_r+0x1a>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	200006b8 	.word	0x200006b8

08004848 <_lseek_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d07      	ldr	r5, [pc, #28]	@ (8004868 <_lseek_r+0x20>)
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	2200      	movs	r2, #0
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fb77 	bl	8000f4a <_lseek>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_lseek_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_lseek_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	200006b8 	.word	0x200006b8

0800486c <_read_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d07      	ldr	r5, [pc, #28]	@ (800488c <_read_r+0x20>)
 8004870:	4604      	mov	r4, r0
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	2200      	movs	r2, #0
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	f7fc fb05 	bl	8000e8a <_read>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d102      	bne.n	800488a <_read_r+0x1e>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	b103      	cbz	r3, 800488a <_read_r+0x1e>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	200006b8 	.word	0x200006b8

08004890 <_write_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d07      	ldr	r5, [pc, #28]	@ (80048b0 <_write_r+0x20>)
 8004894:	4604      	mov	r4, r0
 8004896:	4608      	mov	r0, r1
 8004898:	4611      	mov	r1, r2
 800489a:	2200      	movs	r2, #0
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7fc fb10 	bl	8000ec4 <_write>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_write_r+0x1e>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_write_r+0x1e>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	200006b8 	.word	0x200006b8

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	@ (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000018 	.word	0x20000018

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4d0d      	ldr	r5, [pc, #52]	@ (80048f8 <__libc_init_array+0x38>)
 80048c4:	4c0d      	ldr	r4, [pc, #52]	@ (80048fc <__libc_init_array+0x3c>)
 80048c6:	1b64      	subs	r4, r4, r5
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	2600      	movs	r6, #0
 80048cc:	42a6      	cmp	r6, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004900 <__libc_init_array+0x40>)
 80048d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004904 <__libc_init_array+0x44>)
 80048d4:	f000 fd58 	bl	8005388 <_init>
 80048d8:	1b64      	subs	r4, r4, r5
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	2600      	movs	r6, #0
 80048de:	42a6      	cmp	r6, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e8:	4798      	blx	r3
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f2:	4798      	blx	r3
 80048f4:	3601      	adds	r6, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	08005430 	.word	0x08005430
 80048fc:	08005430 	.word	0x08005430
 8004900:	08005430 	.word	0x08005430
 8004904:	08005434 	.word	0x08005434

08004908 <__retarget_lock_init_recursive>:
 8004908:	4770      	bx	lr

0800490a <__retarget_lock_acquire_recursive>:
 800490a:	4770      	bx	lr

0800490c <__retarget_lock_release_recursive>:
 800490c:	4770      	bx	lr
	...

08004910 <_free_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4605      	mov	r5, r0
 8004914:	2900      	cmp	r1, #0
 8004916:	d041      	beq.n	800499c <_free_r+0x8c>
 8004918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491c:	1f0c      	subs	r4, r1, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb8      	it	lt
 8004922:	18e4      	addlt	r4, r4, r3
 8004924:	f000 f8e0 	bl	8004ae8 <__malloc_lock>
 8004928:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <_free_r+0x90>)
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	b933      	cbnz	r3, 800493c <_free_r+0x2c>
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	6014      	str	r4, [r2, #0]
 8004932:	4628      	mov	r0, r5
 8004934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004938:	f000 b8dc 	b.w	8004af4 <__malloc_unlock>
 800493c:	42a3      	cmp	r3, r4
 800493e:	d908      	bls.n	8004952 <_free_r+0x42>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	1821      	adds	r1, r4, r0
 8004944:	428b      	cmp	r3, r1
 8004946:	bf01      	itttt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	e7ed      	b.n	800492e <_free_r+0x1e>
 8004952:	461a      	mov	r2, r3
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b10b      	cbz	r3, 800495c <_free_r+0x4c>
 8004958:	42a3      	cmp	r3, r4
 800495a:	d9fa      	bls.n	8004952 <_free_r+0x42>
 800495c:	6811      	ldr	r1, [r2, #0]
 800495e:	1850      	adds	r0, r2, r1
 8004960:	42a0      	cmp	r0, r4
 8004962:	d10b      	bne.n	800497c <_free_r+0x6c>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	4401      	add	r1, r0
 8004968:	1850      	adds	r0, r2, r1
 800496a:	4283      	cmp	r3, r0
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	d1e0      	bne.n	8004932 <_free_r+0x22>
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	6053      	str	r3, [r2, #4]
 8004976:	4408      	add	r0, r1
 8004978:	6010      	str	r0, [r2, #0]
 800497a:	e7da      	b.n	8004932 <_free_r+0x22>
 800497c:	d902      	bls.n	8004984 <_free_r+0x74>
 800497e:	230c      	movs	r3, #12
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	e7d6      	b.n	8004932 <_free_r+0x22>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	1821      	adds	r1, r4, r0
 8004988:	428b      	cmp	r3, r1
 800498a:	bf04      	itt	eq
 800498c:	6819      	ldreq	r1, [r3, #0]
 800498e:	685b      	ldreq	r3, [r3, #4]
 8004990:	6063      	str	r3, [r4, #4]
 8004992:	bf04      	itt	eq
 8004994:	1809      	addeq	r1, r1, r0
 8004996:	6021      	streq	r1, [r4, #0]
 8004998:	6054      	str	r4, [r2, #4]
 800499a:	e7ca      	b.n	8004932 <_free_r+0x22>
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	bf00      	nop
 80049a0:	200006c4 	.word	0x200006c4

080049a4 <sbrk_aligned>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4e0f      	ldr	r6, [pc, #60]	@ (80049e4 <sbrk_aligned+0x40>)
 80049a8:	460c      	mov	r4, r1
 80049aa:	6831      	ldr	r1, [r6, #0]
 80049ac:	4605      	mov	r5, r0
 80049ae:	b911      	cbnz	r1, 80049b6 <sbrk_aligned+0x12>
 80049b0:	f000 fcda 	bl	8005368 <_sbrk_r>
 80049b4:	6030      	str	r0, [r6, #0]
 80049b6:	4621      	mov	r1, r4
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 fcd5 	bl	8005368 <_sbrk_r>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d103      	bne.n	80049ca <sbrk_aligned+0x26>
 80049c2:	f04f 34ff 	mov.w	r4, #4294967295
 80049c6:	4620      	mov	r0, r4
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	f024 0403 	bic.w	r4, r4, #3
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d0f8      	beq.n	80049c6 <sbrk_aligned+0x22>
 80049d4:	1a21      	subs	r1, r4, r0
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fcc6 	bl	8005368 <_sbrk_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d1f2      	bne.n	80049c6 <sbrk_aligned+0x22>
 80049e0:	e7ef      	b.n	80049c2 <sbrk_aligned+0x1e>
 80049e2:	bf00      	nop
 80049e4:	200006c0 	.word	0x200006c0

080049e8 <_malloc_r>:
 80049e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ec:	1ccd      	adds	r5, r1, #3
 80049ee:	f025 0503 	bic.w	r5, r5, #3
 80049f2:	3508      	adds	r5, #8
 80049f4:	2d0c      	cmp	r5, #12
 80049f6:	bf38      	it	cc
 80049f8:	250c      	movcc	r5, #12
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	4606      	mov	r6, r0
 80049fe:	db01      	blt.n	8004a04 <_malloc_r+0x1c>
 8004a00:	42a9      	cmp	r1, r5
 8004a02:	d904      	bls.n	8004a0e <_malloc_r+0x26>
 8004a04:	230c      	movs	r3, #12
 8004a06:	6033      	str	r3, [r6, #0]
 8004a08:	2000      	movs	r0, #0
 8004a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ae4 <_malloc_r+0xfc>
 8004a12:	f000 f869 	bl	8004ae8 <__malloc_lock>
 8004a16:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1a:	461c      	mov	r4, r3
 8004a1c:	bb44      	cbnz	r4, 8004a70 <_malloc_r+0x88>
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4630      	mov	r0, r6
 8004a22:	f7ff ffbf 	bl	80049a4 <sbrk_aligned>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	4604      	mov	r4, r0
 8004a2a:	d158      	bne.n	8004ade <_malloc_r+0xf6>
 8004a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a30:	4627      	mov	r7, r4
 8004a32:	2f00      	cmp	r7, #0
 8004a34:	d143      	bne.n	8004abe <_malloc_r+0xd6>
 8004a36:	2c00      	cmp	r4, #0
 8004a38:	d04b      	beq.n	8004ad2 <_malloc_r+0xea>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	4630      	mov	r0, r6
 8004a40:	eb04 0903 	add.w	r9, r4, r3
 8004a44:	f000 fc90 	bl	8005368 <_sbrk_r>
 8004a48:	4581      	cmp	r9, r0
 8004a4a:	d142      	bne.n	8004ad2 <_malloc_r+0xea>
 8004a4c:	6821      	ldr	r1, [r4, #0]
 8004a4e:	1a6d      	subs	r5, r5, r1
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff ffa6 	bl	80049a4 <sbrk_aligned>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d03a      	beq.n	8004ad2 <_malloc_r+0xea>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	442b      	add	r3, r5
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	f8d8 3000 	ldr.w	r3, [r8]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	bb62      	cbnz	r2, 8004ac4 <_malloc_r+0xdc>
 8004a6a:	f8c8 7000 	str.w	r7, [r8]
 8004a6e:	e00f      	b.n	8004a90 <_malloc_r+0xa8>
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	1b52      	subs	r2, r2, r5
 8004a74:	d420      	bmi.n	8004ab8 <_malloc_r+0xd0>
 8004a76:	2a0b      	cmp	r2, #11
 8004a78:	d917      	bls.n	8004aaa <_malloc_r+0xc2>
 8004a7a:	1961      	adds	r1, r4, r5
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	6025      	str	r5, [r4, #0]
 8004a80:	bf18      	it	ne
 8004a82:	6059      	strne	r1, [r3, #4]
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	bf08      	it	eq
 8004a88:	f8c8 1000 	streq.w	r1, [r8]
 8004a8c:	5162      	str	r2, [r4, r5]
 8004a8e:	604b      	str	r3, [r1, #4]
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 f82f 	bl	8004af4 <__malloc_unlock>
 8004a96:	f104 000b 	add.w	r0, r4, #11
 8004a9a:	1d23      	adds	r3, r4, #4
 8004a9c:	f020 0007 	bic.w	r0, r0, #7
 8004aa0:	1ac2      	subs	r2, r0, r3
 8004aa2:	bf1c      	itt	ne
 8004aa4:	1a1b      	subne	r3, r3, r0
 8004aa6:	50a3      	strne	r3, [r4, r2]
 8004aa8:	e7af      	b.n	8004a0a <_malloc_r+0x22>
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	bf0c      	ite	eq
 8004ab0:	f8c8 2000 	streq.w	r2, [r8]
 8004ab4:	605a      	strne	r2, [r3, #4]
 8004ab6:	e7eb      	b.n	8004a90 <_malloc_r+0xa8>
 8004ab8:	4623      	mov	r3, r4
 8004aba:	6864      	ldr	r4, [r4, #4]
 8004abc:	e7ae      	b.n	8004a1c <_malloc_r+0x34>
 8004abe:	463c      	mov	r4, r7
 8004ac0:	687f      	ldr	r7, [r7, #4]
 8004ac2:	e7b6      	b.n	8004a32 <_malloc_r+0x4a>
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	d1fb      	bne.n	8004ac4 <_malloc_r+0xdc>
 8004acc:	2300      	movs	r3, #0
 8004ace:	6053      	str	r3, [r2, #4]
 8004ad0:	e7de      	b.n	8004a90 <_malloc_r+0xa8>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f000 f80c 	bl	8004af4 <__malloc_unlock>
 8004adc:	e794      	b.n	8004a08 <_malloc_r+0x20>
 8004ade:	6005      	str	r5, [r0, #0]
 8004ae0:	e7d6      	b.n	8004a90 <_malloc_r+0xa8>
 8004ae2:	bf00      	nop
 8004ae4:	200006c4 	.word	0x200006c4

08004ae8 <__malloc_lock>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	@ (8004af0 <__malloc_lock+0x8>)
 8004aea:	f7ff bf0e 	b.w	800490a <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	200006bc 	.word	0x200006bc

08004af4 <__malloc_unlock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	@ (8004afc <__malloc_unlock+0x8>)
 8004af6:	f7ff bf09 	b.w	800490c <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	200006bc 	.word	0x200006bc

08004b00 <__sfputc_r>:
 8004b00:	6893      	ldr	r3, [r2, #8]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	b410      	push	{r4}
 8004b08:	6093      	str	r3, [r2, #8]
 8004b0a:	da08      	bge.n	8004b1e <__sfputc_r+0x1e>
 8004b0c:	6994      	ldr	r4, [r2, #24]
 8004b0e:	42a3      	cmp	r3, r4
 8004b10:	db01      	blt.n	8004b16 <__sfputc_r+0x16>
 8004b12:	290a      	cmp	r1, #10
 8004b14:	d103      	bne.n	8004b1e <__sfputc_r+0x1e>
 8004b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b1a:	f7ff bde8 	b.w	80046ee <__swbuf_r>
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	1c58      	adds	r0, r3, #1
 8004b22:	6010      	str	r0, [r2, #0]
 8004b24:	7019      	strb	r1, [r3, #0]
 8004b26:	4608      	mov	r0, r1
 8004b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <__sfputs_r>:
 8004b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b30:	4606      	mov	r6, r0
 8004b32:	460f      	mov	r7, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	18d5      	adds	r5, r2, r3
 8004b38:	42ac      	cmp	r4, r5
 8004b3a:	d101      	bne.n	8004b40 <__sfputs_r+0x12>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e007      	b.n	8004b50 <__sfputs_r+0x22>
 8004b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b44:	463a      	mov	r2, r7
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7ff ffda 	bl	8004b00 <__sfputc_r>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d1f3      	bne.n	8004b38 <__sfputs_r+0xa>
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b54 <_vfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	460d      	mov	r5, r1
 8004b5a:	b09d      	sub	sp, #116	@ 0x74
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	4698      	mov	r8, r3
 8004b60:	4606      	mov	r6, r0
 8004b62:	b118      	cbz	r0, 8004b6c <_vfiprintf_r+0x18>
 8004b64:	6a03      	ldr	r3, [r0, #32]
 8004b66:	b90b      	cbnz	r3, 8004b6c <_vfiprintf_r+0x18>
 8004b68:	f7ff fcd0 	bl	800450c <__sinit>
 8004b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b6e:	07d9      	lsls	r1, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <_vfiprintf_r+0x2a>
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	059a      	lsls	r2, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_vfiprintf_r+0x2a>
 8004b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b7a:	f7ff fec6 	bl	800490a <__retarget_lock_acquire_recursive>
 8004b7e:	89ab      	ldrh	r3, [r5, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	d501      	bpl.n	8004b88 <_vfiprintf_r+0x34>
 8004b84:	692b      	ldr	r3, [r5, #16]
 8004b86:	b99b      	cbnz	r3, 8004bb0 <_vfiprintf_r+0x5c>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7ff fdee 	bl	800476c <__swsetup_r>
 8004b90:	b170      	cbz	r0, 8004bb0 <_vfiprintf_r+0x5c>
 8004b92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b94:	07dc      	lsls	r4, r3, #31
 8004b96:	d504      	bpl.n	8004ba2 <_vfiprintf_r+0x4e>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	b01d      	add	sp, #116	@ 0x74
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	89ab      	ldrh	r3, [r5, #12]
 8004ba4:	0598      	lsls	r0, r3, #22
 8004ba6:	d4f7      	bmi.n	8004b98 <_vfiprintf_r+0x44>
 8004ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004baa:	f7ff feaf 	bl	800490c <__retarget_lock_release_recursive>
 8004bae:	e7f3      	b.n	8004b98 <_vfiprintf_r+0x44>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bbe:	2330      	movs	r3, #48	@ 0x30
 8004bc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d70 <_vfiprintf_r+0x21c>
 8004bc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bc8:	f04f 0901 	mov.w	r9, #1
 8004bcc:	4623      	mov	r3, r4
 8004bce:	469a      	mov	sl, r3
 8004bd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd4:	b10a      	cbz	r2, 8004bda <_vfiprintf_r+0x86>
 8004bd6:	2a25      	cmp	r2, #37	@ 0x25
 8004bd8:	d1f9      	bne.n	8004bce <_vfiprintf_r+0x7a>
 8004bda:	ebba 0b04 	subs.w	fp, sl, r4
 8004bde:	d00b      	beq.n	8004bf8 <_vfiprintf_r+0xa4>
 8004be0:	465b      	mov	r3, fp
 8004be2:	4622      	mov	r2, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7ff ffa1 	bl	8004b2e <__sfputs_r>
 8004bec:	3001      	adds	r0, #1
 8004bee:	f000 80a7 	beq.w	8004d40 <_vfiprintf_r+0x1ec>
 8004bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bf4:	445a      	add	r2, fp
 8004bf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 809f 	beq.w	8004d40 <_vfiprintf_r+0x1ec>
 8004c02:	2300      	movs	r3, #0
 8004c04:	f04f 32ff 	mov.w	r2, #4294967295
 8004c08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c0c:	f10a 0a01 	add.w	sl, sl, #1
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	9307      	str	r3, [sp, #28]
 8004c14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c18:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c1a:	4654      	mov	r4, sl
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c22:	4853      	ldr	r0, [pc, #332]	@ (8004d70 <_vfiprintf_r+0x21c>)
 8004c24:	f7fb fad4 	bl	80001d0 <memchr>
 8004c28:	9a04      	ldr	r2, [sp, #16]
 8004c2a:	b9d8      	cbnz	r0, 8004c64 <_vfiprintf_r+0x110>
 8004c2c:	06d1      	lsls	r1, r2, #27
 8004c2e:	bf44      	itt	mi
 8004c30:	2320      	movmi	r3, #32
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c36:	0713      	lsls	r3, r2, #28
 8004c38:	bf44      	itt	mi
 8004c3a:	232b      	movmi	r3, #43	@ 0x2b
 8004c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c40:	f89a 3000 	ldrb.w	r3, [sl]
 8004c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c46:	d015      	beq.n	8004c74 <_vfiprintf_r+0x120>
 8004c48:	9a07      	ldr	r2, [sp, #28]
 8004c4a:	4654      	mov	r4, sl
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f04f 0c0a 	mov.w	ip, #10
 8004c52:	4621      	mov	r1, r4
 8004c54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c58:	3b30      	subs	r3, #48	@ 0x30
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	d94b      	bls.n	8004cf6 <_vfiprintf_r+0x1a2>
 8004c5e:	b1b0      	cbz	r0, 8004c8e <_vfiprintf_r+0x13a>
 8004c60:	9207      	str	r2, [sp, #28]
 8004c62:	e014      	b.n	8004c8e <_vfiprintf_r+0x13a>
 8004c64:	eba0 0308 	sub.w	r3, r0, r8
 8004c68:	fa09 f303 	lsl.w	r3, r9, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	46a2      	mov	sl, r4
 8004c72:	e7d2      	b.n	8004c1a <_vfiprintf_r+0xc6>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	1d19      	adds	r1, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9103      	str	r1, [sp, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bfbb      	ittet	lt
 8004c80:	425b      	neglt	r3, r3
 8004c82:	f042 0202 	orrlt.w	r2, r2, #2
 8004c86:	9307      	strge	r3, [sp, #28]
 8004c88:	9307      	strlt	r3, [sp, #28]
 8004c8a:	bfb8      	it	lt
 8004c8c:	9204      	strlt	r2, [sp, #16]
 8004c8e:	7823      	ldrb	r3, [r4, #0]
 8004c90:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c92:	d10a      	bne.n	8004caa <_vfiprintf_r+0x156>
 8004c94:	7863      	ldrb	r3, [r4, #1]
 8004c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c98:	d132      	bne.n	8004d00 <_vfiprintf_r+0x1ac>
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	9203      	str	r2, [sp, #12]
 8004ca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ca6:	3402      	adds	r4, #2
 8004ca8:	9305      	str	r3, [sp, #20]
 8004caa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d80 <_vfiprintf_r+0x22c>
 8004cae:	7821      	ldrb	r1, [r4, #0]
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	f7fb fa8c 	bl	80001d0 <memchr>
 8004cb8:	b138      	cbz	r0, 8004cca <_vfiprintf_r+0x176>
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	eba0 000a 	sub.w	r0, r0, sl
 8004cc0:	2240      	movs	r2, #64	@ 0x40
 8004cc2:	4082      	lsls	r2, r0
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	3401      	adds	r4, #1
 8004cc8:	9304      	str	r3, [sp, #16]
 8004cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cce:	4829      	ldr	r0, [pc, #164]	@ (8004d74 <_vfiprintf_r+0x220>)
 8004cd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cd4:	2206      	movs	r2, #6
 8004cd6:	f7fb fa7b 	bl	80001d0 <memchr>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d03f      	beq.n	8004d5e <_vfiprintf_r+0x20a>
 8004cde:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <_vfiprintf_r+0x224>)
 8004ce0:	bb1b      	cbnz	r3, 8004d2a <_vfiprintf_r+0x1d6>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	f023 0307 	bic.w	r3, r3, #7
 8004cea:	3308      	adds	r3, #8
 8004cec:	9303      	str	r3, [sp, #12]
 8004cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf0:	443b      	add	r3, r7
 8004cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf4:	e76a      	b.n	8004bcc <_vfiprintf_r+0x78>
 8004cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	e7a8      	b.n	8004c52 <_vfiprintf_r+0xfe>
 8004d00:	2300      	movs	r3, #0
 8004d02:	3401      	adds	r4, #1
 8004d04:	9305      	str	r3, [sp, #20]
 8004d06:	4619      	mov	r1, r3
 8004d08:	f04f 0c0a 	mov.w	ip, #10
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d12:	3a30      	subs	r2, #48	@ 0x30
 8004d14:	2a09      	cmp	r2, #9
 8004d16:	d903      	bls.n	8004d20 <_vfiprintf_r+0x1cc>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0c6      	beq.n	8004caa <_vfiprintf_r+0x156>
 8004d1c:	9105      	str	r1, [sp, #20]
 8004d1e:	e7c4      	b.n	8004caa <_vfiprintf_r+0x156>
 8004d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d24:	4604      	mov	r4, r0
 8004d26:	2301      	movs	r3, #1
 8004d28:	e7f0      	b.n	8004d0c <_vfiprintf_r+0x1b8>
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b12      	ldr	r3, [pc, #72]	@ (8004d7c <_vfiprintf_r+0x228>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4630      	mov	r0, r6
 8004d36:	f3af 8000 	nop.w
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	1c78      	adds	r0, r7, #1
 8004d3e:	d1d6      	bne.n	8004cee <_vfiprintf_r+0x19a>
 8004d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d42:	07d9      	lsls	r1, r3, #31
 8004d44:	d405      	bmi.n	8004d52 <_vfiprintf_r+0x1fe>
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	059a      	lsls	r2, r3, #22
 8004d4a:	d402      	bmi.n	8004d52 <_vfiprintf_r+0x1fe>
 8004d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d4e:	f7ff fddd 	bl	800490c <__retarget_lock_release_recursive>
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	065b      	lsls	r3, r3, #25
 8004d56:	f53f af1f 	bmi.w	8004b98 <_vfiprintf_r+0x44>
 8004d5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d5c:	e71e      	b.n	8004b9c <_vfiprintf_r+0x48>
 8004d5e:	ab03      	add	r3, sp, #12
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	462a      	mov	r2, r5
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <_vfiprintf_r+0x228>)
 8004d66:	a904      	add	r1, sp, #16
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f879 	bl	8004e60 <_printf_i>
 8004d6e:	e7e4      	b.n	8004d3a <_vfiprintf_r+0x1e6>
 8004d70:	080053f4 	.word	0x080053f4
 8004d74:	080053fe 	.word	0x080053fe
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	08004b2f 	.word	0x08004b2f
 8004d80:	080053fa 	.word	0x080053fa

08004d84 <_printf_common>:
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	4616      	mov	r6, r2
 8004d8a:	4698      	mov	r8, r3
 8004d8c:	688a      	ldr	r2, [r1, #8]
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d94:	4293      	cmp	r3, r2
 8004d96:	bfb8      	it	lt
 8004d98:	4613      	movlt	r3, r2
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004da0:	4607      	mov	r7, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	b10a      	cbz	r2, 8004daa <_printf_common+0x26>
 8004da6:	3301      	adds	r3, #1
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0699      	lsls	r1, r3, #26
 8004dae:	bf42      	ittt	mi
 8004db0:	6833      	ldrmi	r3, [r6, #0]
 8004db2:	3302      	addmi	r3, #2
 8004db4:	6033      	strmi	r3, [r6, #0]
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	f015 0506 	ands.w	r5, r5, #6
 8004dbc:	d106      	bne.n	8004dcc <_printf_common+0x48>
 8004dbe:	f104 0a19 	add.w	sl, r4, #25
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	dc26      	bgt.n	8004e1a <_printf_common+0x96>
 8004dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	3b00      	subs	r3, #0
 8004dd4:	bf18      	it	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	0692      	lsls	r2, r2, #26
 8004dda:	d42b      	bmi.n	8004e34 <_printf_common+0xb0>
 8004ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004de0:	4641      	mov	r1, r8
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c8      	blx	r9
 8004de6:	3001      	adds	r0, #1
 8004de8:	d01e      	beq.n	8004e28 <_printf_common+0xa4>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	f003 0306 	and.w	r3, r3, #6
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf02      	ittt	eq
 8004df6:	68e5      	ldreq	r5, [r4, #12]
 8004df8:	6833      	ldreq	r3, [r6, #0]
 8004dfa:	1aed      	subeq	r5, r5, r3
 8004dfc:	68a3      	ldr	r3, [r4, #8]
 8004dfe:	bf0c      	ite	eq
 8004e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e04:	2500      	movne	r5, #0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bfc4      	itt	gt
 8004e0a:	1a9b      	subgt	r3, r3, r2
 8004e0c:	18ed      	addgt	r5, r5, r3
 8004e0e:	2600      	movs	r6, #0
 8004e10:	341a      	adds	r4, #26
 8004e12:	42b5      	cmp	r5, r6
 8004e14:	d11a      	bne.n	8004e4c <_printf_common+0xc8>
 8004e16:	2000      	movs	r0, #0
 8004e18:	e008      	b.n	8004e2c <_printf_common+0xa8>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4641      	mov	r1, r8
 8004e20:	4638      	mov	r0, r7
 8004e22:	47c8      	blx	r9
 8004e24:	3001      	adds	r0, #1
 8004e26:	d103      	bne.n	8004e30 <_printf_common+0xac>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	3501      	adds	r5, #1
 8004e32:	e7c6      	b.n	8004dc2 <_printf_common+0x3e>
 8004e34:	18e1      	adds	r1, r4, r3
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	2030      	movs	r0, #48	@ 0x30
 8004e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e3e:	4422      	add	r2, r4
 8004e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e48:	3302      	adds	r3, #2
 8004e4a:	e7c7      	b.n	8004ddc <_printf_common+0x58>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4622      	mov	r2, r4
 8004e50:	4641      	mov	r1, r8
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c8      	blx	r9
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0e6      	beq.n	8004e28 <_printf_common+0xa4>
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7d9      	b.n	8004e12 <_printf_common+0x8e>
	...

08004e60 <_printf_i>:
 8004e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	7e0f      	ldrb	r7, [r1, #24]
 8004e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e68:	2f78      	cmp	r7, #120	@ 0x78
 8004e6a:	4691      	mov	r9, r2
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	469a      	mov	sl, r3
 8004e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e76:	d807      	bhi.n	8004e88 <_printf_i+0x28>
 8004e78:	2f62      	cmp	r7, #98	@ 0x62
 8004e7a:	d80a      	bhi.n	8004e92 <_printf_i+0x32>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	f000 80d2 	beq.w	8005026 <_printf_i+0x1c6>
 8004e82:	2f58      	cmp	r7, #88	@ 0x58
 8004e84:	f000 80b9 	beq.w	8004ffa <_printf_i+0x19a>
 8004e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e90:	e03a      	b.n	8004f08 <_printf_i+0xa8>
 8004e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e96:	2b15      	cmp	r3, #21
 8004e98:	d8f6      	bhi.n	8004e88 <_printf_i+0x28>
 8004e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea0 <_printf_i+0x40>)
 8004e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004f0d 	.word	0x08004f0d
 8004ea8:	08004e89 	.word	0x08004e89
 8004eac:	08004e89 	.word	0x08004e89
 8004eb0:	08004e89 	.word	0x08004e89
 8004eb4:	08004e89 	.word	0x08004e89
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e89 	.word	0x08004e89
 8004ec0:	08004e89 	.word	0x08004e89
 8004ec4:	08004e89 	.word	0x08004e89
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	0800500d 	.word	0x0800500d
 8004ed0:	08004f37 	.word	0x08004f37
 8004ed4:	08004fc7 	.word	0x08004fc7
 8004ed8:	08004e89 	.word	0x08004e89
 8004edc:	08004e89 	.word	0x08004e89
 8004ee0:	0800502f 	.word	0x0800502f
 8004ee4:	08004e89 	.word	0x08004e89
 8004ee8:	08004f37 	.word	0x08004f37
 8004eec:	08004e89 	.word	0x08004e89
 8004ef0:	08004e89 	.word	0x08004e89
 8004ef4:	08004fcf 	.word	0x08004fcf
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6032      	str	r2, [r6, #0]
 8004f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e09d      	b.n	8005048 <_printf_i+0x1e8>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	6031      	str	r1, [r6, #0]
 8004f14:	0606      	lsls	r6, r0, #24
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0xbc>
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	e003      	b.n	8004f24 <_printf_i+0xc4>
 8004f1c:	0645      	lsls	r5, r0, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0xb8>
 8004f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	da03      	bge.n	8004f30 <_printf_i+0xd0>
 8004f28:	232d      	movs	r3, #45	@ 0x2d
 8004f2a:	426d      	negs	r5, r5
 8004f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f30:	4859      	ldr	r0, [pc, #356]	@ (8005098 <_printf_i+0x238>)
 8004f32:	230a      	movs	r3, #10
 8004f34:	e011      	b.n	8004f5a <_printf_i+0xfa>
 8004f36:	6821      	ldr	r1, [r4, #0]
 8004f38:	6833      	ldr	r3, [r6, #0]
 8004f3a:	0608      	lsls	r0, r1, #24
 8004f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f40:	d402      	bmi.n	8004f48 <_printf_i+0xe8>
 8004f42:	0649      	lsls	r1, r1, #25
 8004f44:	bf48      	it	mi
 8004f46:	b2ad      	uxthmi	r5, r5
 8004f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f4a:	4853      	ldr	r0, [pc, #332]	@ (8005098 <_printf_i+0x238>)
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	bf14      	ite	ne
 8004f50:	230a      	movne	r3, #10
 8004f52:	2308      	moveq	r3, #8
 8004f54:	2100      	movs	r1, #0
 8004f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f5a:	6866      	ldr	r6, [r4, #4]
 8004f5c:	60a6      	str	r6, [r4, #8]
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	bfa2      	ittt	ge
 8004f62:	6821      	ldrge	r1, [r4, #0]
 8004f64:	f021 0104 	bicge.w	r1, r1, #4
 8004f68:	6021      	strge	r1, [r4, #0]
 8004f6a:	b90d      	cbnz	r5, 8004f70 <_printf_i+0x110>
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	d04b      	beq.n	8005008 <_printf_i+0x1a8>
 8004f70:	4616      	mov	r6, r2
 8004f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f76:	fb03 5711 	mls	r7, r3, r1, r5
 8004f7a:	5dc7      	ldrb	r7, [r0, r7]
 8004f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f80:	462f      	mov	r7, r5
 8004f82:	42bb      	cmp	r3, r7
 8004f84:	460d      	mov	r5, r1
 8004f86:	d9f4      	bls.n	8004f72 <_printf_i+0x112>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d10b      	bne.n	8004fa4 <_printf_i+0x144>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	07df      	lsls	r7, r3, #31
 8004f90:	d508      	bpl.n	8004fa4 <_printf_i+0x144>
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6861      	ldr	r1, [r4, #4]
 8004f96:	4299      	cmp	r1, r3
 8004f98:	bfde      	ittt	le
 8004f9a:	2330      	movle	r3, #48	@ 0x30
 8004f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fa4:	1b92      	subs	r2, r2, r6
 8004fa6:	6122      	str	r2, [r4, #16]
 8004fa8:	f8cd a000 	str.w	sl, [sp]
 8004fac:	464b      	mov	r3, r9
 8004fae:	aa03      	add	r2, sp, #12
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f7ff fee6 	bl	8004d84 <_printf_common>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d14a      	bne.n	8005052 <_printf_i+0x1f2>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	b004      	add	sp, #16
 8004fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f043 0320 	orr.w	r3, r3, #32
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	4833      	ldr	r0, [pc, #204]	@ (800509c <_printf_i+0x23c>)
 8004fd0:	2778      	movs	r7, #120	@ 0x78
 8004fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	6831      	ldr	r1, [r6, #0]
 8004fda:	061f      	lsls	r7, r3, #24
 8004fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fe0:	d402      	bmi.n	8004fe8 <_printf_i+0x188>
 8004fe2:	065f      	lsls	r7, r3, #25
 8004fe4:	bf48      	it	mi
 8004fe6:	b2ad      	uxthmi	r5, r5
 8004fe8:	6031      	str	r1, [r6, #0]
 8004fea:	07d9      	lsls	r1, r3, #31
 8004fec:	bf44      	itt	mi
 8004fee:	f043 0320 	orrmi.w	r3, r3, #32
 8004ff2:	6023      	strmi	r3, [r4, #0]
 8004ff4:	b11d      	cbz	r5, 8004ffe <_printf_i+0x19e>
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	e7ac      	b.n	8004f54 <_printf_i+0xf4>
 8004ffa:	4827      	ldr	r0, [pc, #156]	@ (8005098 <_printf_i+0x238>)
 8004ffc:	e7e9      	b.n	8004fd2 <_printf_i+0x172>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	f023 0320 	bic.w	r3, r3, #32
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	e7f6      	b.n	8004ff6 <_printf_i+0x196>
 8005008:	4616      	mov	r6, r2
 800500a:	e7bd      	b.n	8004f88 <_printf_i+0x128>
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	6825      	ldr	r5, [r4, #0]
 8005010:	6961      	ldr	r1, [r4, #20]
 8005012:	1d18      	adds	r0, r3, #4
 8005014:	6030      	str	r0, [r6, #0]
 8005016:	062e      	lsls	r6, r5, #24
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	d501      	bpl.n	8005020 <_printf_i+0x1c0>
 800501c:	6019      	str	r1, [r3, #0]
 800501e:	e002      	b.n	8005026 <_printf_i+0x1c6>
 8005020:	0668      	lsls	r0, r5, #25
 8005022:	d5fb      	bpl.n	800501c <_printf_i+0x1bc>
 8005024:	8019      	strh	r1, [r3, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	4616      	mov	r6, r2
 800502c:	e7bc      	b.n	8004fa8 <_printf_i+0x148>
 800502e:	6833      	ldr	r3, [r6, #0]
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	6032      	str	r2, [r6, #0]
 8005034:	681e      	ldr	r6, [r3, #0]
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	2100      	movs	r1, #0
 800503a:	4630      	mov	r0, r6
 800503c:	f7fb f8c8 	bl	80001d0 <memchr>
 8005040:	b108      	cbz	r0, 8005046 <_printf_i+0x1e6>
 8005042:	1b80      	subs	r0, r0, r6
 8005044:	6060      	str	r0, [r4, #4]
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	2300      	movs	r3, #0
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005050:	e7aa      	b.n	8004fa8 <_printf_i+0x148>
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	4632      	mov	r2, r6
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	47d0      	blx	sl
 800505c:	3001      	adds	r0, #1
 800505e:	d0ad      	beq.n	8004fbc <_printf_i+0x15c>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	079b      	lsls	r3, r3, #30
 8005064:	d413      	bmi.n	800508e <_printf_i+0x22e>
 8005066:	68e0      	ldr	r0, [r4, #12]
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	4298      	cmp	r0, r3
 800506c:	bfb8      	it	lt
 800506e:	4618      	movlt	r0, r3
 8005070:	e7a6      	b.n	8004fc0 <_printf_i+0x160>
 8005072:	2301      	movs	r3, #1
 8005074:	4632      	mov	r2, r6
 8005076:	4649      	mov	r1, r9
 8005078:	4640      	mov	r0, r8
 800507a:	47d0      	blx	sl
 800507c:	3001      	adds	r0, #1
 800507e:	d09d      	beq.n	8004fbc <_printf_i+0x15c>
 8005080:	3501      	adds	r5, #1
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	9903      	ldr	r1, [sp, #12]
 8005086:	1a5b      	subs	r3, r3, r1
 8005088:	42ab      	cmp	r3, r5
 800508a:	dcf2      	bgt.n	8005072 <_printf_i+0x212>
 800508c:	e7eb      	b.n	8005066 <_printf_i+0x206>
 800508e:	2500      	movs	r5, #0
 8005090:	f104 0619 	add.w	r6, r4, #25
 8005094:	e7f5      	b.n	8005082 <_printf_i+0x222>
 8005096:	bf00      	nop
 8005098:	08005405 	.word	0x08005405
 800509c:	08005416 	.word	0x08005416

080050a0 <__sflush_r>:
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	0716      	lsls	r6, r2, #28
 80050aa:	4605      	mov	r5, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d454      	bmi.n	800515a <__sflush_r+0xba>
 80050b0:	684b      	ldr	r3, [r1, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dc02      	bgt.n	80050bc <__sflush_r+0x1c>
 80050b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd48      	ble.n	800514e <__sflush_r+0xae>
 80050bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d045      	beq.n	800514e <__sflush_r+0xae>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050c8:	682f      	ldr	r7, [r5, #0]
 80050ca:	6a21      	ldr	r1, [r4, #32]
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	d030      	beq.n	8005132 <__sflush_r+0x92>
 80050d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	0759      	lsls	r1, r3, #29
 80050d6:	d505      	bpl.n	80050e4 <__sflush_r+0x44>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050de:	b10b      	cbz	r3, 80050e4 <__sflush_r+0x44>
 80050e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050e8:	6a21      	ldr	r1, [r4, #32]
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	d106      	bne.n	8005102 <__sflush_r+0x62>
 80050f4:	6829      	ldr	r1, [r5, #0]
 80050f6:	291d      	cmp	r1, #29
 80050f8:	d82b      	bhi.n	8005152 <__sflush_r+0xb2>
 80050fa:	4a2a      	ldr	r2, [pc, #168]	@ (80051a4 <__sflush_r+0x104>)
 80050fc:	410a      	asrs	r2, r1
 80050fe:	07d6      	lsls	r6, r2, #31
 8005100:	d427      	bmi.n	8005152 <__sflush_r+0xb2>
 8005102:	2200      	movs	r2, #0
 8005104:	6062      	str	r2, [r4, #4]
 8005106:	04d9      	lsls	r1, r3, #19
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	d504      	bpl.n	8005118 <__sflush_r+0x78>
 800510e:	1c42      	adds	r2, r0, #1
 8005110:	d101      	bne.n	8005116 <__sflush_r+0x76>
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	b903      	cbnz	r3, 8005118 <__sflush_r+0x78>
 8005116:	6560      	str	r0, [r4, #84]	@ 0x54
 8005118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800511a:	602f      	str	r7, [r5, #0]
 800511c:	b1b9      	cbz	r1, 800514e <__sflush_r+0xae>
 800511e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005122:	4299      	cmp	r1, r3
 8005124:	d002      	beq.n	800512c <__sflush_r+0x8c>
 8005126:	4628      	mov	r0, r5
 8005128:	f7ff fbf2 	bl	8004910 <_free_r>
 800512c:	2300      	movs	r3, #0
 800512e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005130:	e00d      	b.n	800514e <__sflush_r+0xae>
 8005132:	2301      	movs	r3, #1
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	4602      	mov	r2, r0
 800513a:	1c50      	adds	r0, r2, #1
 800513c:	d1c9      	bne.n	80050d2 <__sflush_r+0x32>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0c6      	beq.n	80050d2 <__sflush_r+0x32>
 8005144:	2b1d      	cmp	r3, #29
 8005146:	d001      	beq.n	800514c <__sflush_r+0xac>
 8005148:	2b16      	cmp	r3, #22
 800514a:	d11e      	bne.n	800518a <__sflush_r+0xea>
 800514c:	602f      	str	r7, [r5, #0]
 800514e:	2000      	movs	r0, #0
 8005150:	e022      	b.n	8005198 <__sflush_r+0xf8>
 8005152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005156:	b21b      	sxth	r3, r3
 8005158:	e01b      	b.n	8005192 <__sflush_r+0xf2>
 800515a:	690f      	ldr	r7, [r1, #16]
 800515c:	2f00      	cmp	r7, #0
 800515e:	d0f6      	beq.n	800514e <__sflush_r+0xae>
 8005160:	0793      	lsls	r3, r2, #30
 8005162:	680e      	ldr	r6, [r1, #0]
 8005164:	bf08      	it	eq
 8005166:	694b      	ldreq	r3, [r1, #20]
 8005168:	600f      	str	r7, [r1, #0]
 800516a:	bf18      	it	ne
 800516c:	2300      	movne	r3, #0
 800516e:	eba6 0807 	sub.w	r8, r6, r7
 8005172:	608b      	str	r3, [r1, #8]
 8005174:	f1b8 0f00 	cmp.w	r8, #0
 8005178:	dde9      	ble.n	800514e <__sflush_r+0xae>
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800517e:	4643      	mov	r3, r8
 8005180:	463a      	mov	r2, r7
 8005182:	4628      	mov	r0, r5
 8005184:	47b0      	blx	r6
 8005186:	2800      	cmp	r0, #0
 8005188:	dc08      	bgt.n	800519c <__sflush_r+0xfc>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4407      	add	r7, r0
 800519e:	eba8 0800 	sub.w	r8, r8, r0
 80051a2:	e7e7      	b.n	8005174 <__sflush_r+0xd4>
 80051a4:	dfbffffe 	.word	0xdfbffffe

080051a8 <_fflush_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	690b      	ldr	r3, [r1, #16]
 80051ac:	4605      	mov	r5, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	b913      	cbnz	r3, 80051b8 <_fflush_r+0x10>
 80051b2:	2500      	movs	r5, #0
 80051b4:	4628      	mov	r0, r5
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	b118      	cbz	r0, 80051c2 <_fflush_r+0x1a>
 80051ba:	6a03      	ldr	r3, [r0, #32]
 80051bc:	b90b      	cbnz	r3, 80051c2 <_fflush_r+0x1a>
 80051be:	f7ff f9a5 	bl	800450c <__sinit>
 80051c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f3      	beq.n	80051b2 <_fflush_r+0xa>
 80051ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051cc:	07d0      	lsls	r0, r2, #31
 80051ce:	d404      	bmi.n	80051da <_fflush_r+0x32>
 80051d0:	0599      	lsls	r1, r3, #22
 80051d2:	d402      	bmi.n	80051da <_fflush_r+0x32>
 80051d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d6:	f7ff fb98 	bl	800490a <__retarget_lock_acquire_recursive>
 80051da:	4628      	mov	r0, r5
 80051dc:	4621      	mov	r1, r4
 80051de:	f7ff ff5f 	bl	80050a0 <__sflush_r>
 80051e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051e4:	07da      	lsls	r2, r3, #31
 80051e6:	4605      	mov	r5, r0
 80051e8:	d4e4      	bmi.n	80051b4 <_fflush_r+0xc>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	059b      	lsls	r3, r3, #22
 80051ee:	d4e1      	bmi.n	80051b4 <_fflush_r+0xc>
 80051f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051f2:	f7ff fb8b 	bl	800490c <__retarget_lock_release_recursive>
 80051f6:	e7dd      	b.n	80051b4 <_fflush_r+0xc>

080051f8 <__swhatbuf_r>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	460c      	mov	r4, r1
 80051fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005200:	2900      	cmp	r1, #0
 8005202:	b096      	sub	sp, #88	@ 0x58
 8005204:	4615      	mov	r5, r2
 8005206:	461e      	mov	r6, r3
 8005208:	da0d      	bge.n	8005226 <__swhatbuf_r+0x2e>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	bf14      	ite	ne
 8005216:	2340      	movne	r3, #64	@ 0x40
 8005218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800521c:	2000      	movs	r0, #0
 800521e:	6031      	str	r1, [r6, #0]
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	b016      	add	sp, #88	@ 0x58
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	466a      	mov	r2, sp
 8005228:	f000 f87c 	bl	8005324 <_fstat_r>
 800522c:	2800      	cmp	r0, #0
 800522e:	dbec      	blt.n	800520a <__swhatbuf_r+0x12>
 8005230:	9901      	ldr	r1, [sp, #4]
 8005232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800523a:	4259      	negs	r1, r3
 800523c:	4159      	adcs	r1, r3
 800523e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005242:	e7eb      	b.n	800521c <__swhatbuf_r+0x24>

08005244 <__smakebuf_r>:
 8005244:	898b      	ldrh	r3, [r1, #12]
 8005246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005248:	079d      	lsls	r5, r3, #30
 800524a:	4606      	mov	r6, r0
 800524c:	460c      	mov	r4, r1
 800524e:	d507      	bpl.n	8005260 <__smakebuf_r+0x1c>
 8005250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	2301      	movs	r3, #1
 800525a:	6163      	str	r3, [r4, #20]
 800525c:	b003      	add	sp, #12
 800525e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005260:	ab01      	add	r3, sp, #4
 8005262:	466a      	mov	r2, sp
 8005264:	f7ff ffc8 	bl	80051f8 <__swhatbuf_r>
 8005268:	9f00      	ldr	r7, [sp, #0]
 800526a:	4605      	mov	r5, r0
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff fbba 	bl	80049e8 <_malloc_r>
 8005274:	b948      	cbnz	r0, 800528a <__smakebuf_r+0x46>
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	059a      	lsls	r2, r3, #22
 800527c:	d4ee      	bmi.n	800525c <__smakebuf_r+0x18>
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	e7e2      	b.n	8005250 <__smakebuf_r+0xc>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	6020      	str	r0, [r4, #0]
 800528e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800529a:	b15b      	cbz	r3, 80052b4 <__smakebuf_r+0x70>
 800529c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a0:	4630      	mov	r0, r6
 80052a2:	f000 f851 	bl	8005348 <_isatty_r>
 80052a6:	b128      	cbz	r0, 80052b4 <__smakebuf_r+0x70>
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	431d      	orrs	r5, r3
 80052b8:	81a5      	strh	r5, [r4, #12]
 80052ba:	e7cf      	b.n	800525c <__smakebuf_r+0x18>

080052bc <_putc_r>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	460d      	mov	r5, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	4606      	mov	r6, r0
 80052c4:	b118      	cbz	r0, 80052ce <_putc_r+0x12>
 80052c6:	6a03      	ldr	r3, [r0, #32]
 80052c8:	b90b      	cbnz	r3, 80052ce <_putc_r+0x12>
 80052ca:	f7ff f91f 	bl	800450c <__sinit>
 80052ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d0:	07d8      	lsls	r0, r3, #31
 80052d2:	d405      	bmi.n	80052e0 <_putc_r+0x24>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	0599      	lsls	r1, r3, #22
 80052d8:	d402      	bmi.n	80052e0 <_putc_r+0x24>
 80052da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052dc:	f7ff fb15 	bl	800490a <__retarget_lock_acquire_recursive>
 80052e0:	68a3      	ldr	r3, [r4, #8]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	60a3      	str	r3, [r4, #8]
 80052e8:	da05      	bge.n	80052f6 <_putc_r+0x3a>
 80052ea:	69a2      	ldr	r2, [r4, #24]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	db12      	blt.n	8005316 <_putc_r+0x5a>
 80052f0:	b2eb      	uxtb	r3, r5
 80052f2:	2b0a      	cmp	r3, #10
 80052f4:	d00f      	beq.n	8005316 <_putc_r+0x5a>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	701d      	strb	r5, [r3, #0]
 80052fe:	b2ed      	uxtb	r5, r5
 8005300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005302:	07da      	lsls	r2, r3, #31
 8005304:	d405      	bmi.n	8005312 <_putc_r+0x56>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	059b      	lsls	r3, r3, #22
 800530a:	d402      	bmi.n	8005312 <_putc_r+0x56>
 800530c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800530e:	f7ff fafd 	bl	800490c <__retarget_lock_release_recursive>
 8005312:	4628      	mov	r0, r5
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	4629      	mov	r1, r5
 8005318:	4622      	mov	r2, r4
 800531a:	4630      	mov	r0, r6
 800531c:	f7ff f9e7 	bl	80046ee <__swbuf_r>
 8005320:	4605      	mov	r5, r0
 8005322:	e7ed      	b.n	8005300 <_putc_r+0x44>

08005324 <_fstat_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d07      	ldr	r5, [pc, #28]	@ (8005344 <_fstat_r+0x20>)
 8005328:	2300      	movs	r3, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	f7fb fdef 	bl	8000f14 <_fstat>
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	d102      	bne.n	8005340 <_fstat_r+0x1c>
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	b103      	cbz	r3, 8005340 <_fstat_r+0x1c>
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	bd38      	pop	{r3, r4, r5, pc}
 8005342:	bf00      	nop
 8005344:	200006b8 	.word	0x200006b8

08005348 <_isatty_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d06      	ldr	r5, [pc, #24]	@ (8005364 <_isatty_r+0x1c>)
 800534c:	2300      	movs	r3, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7fb fdee 	bl	8000f34 <_isatty>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_isatty_r+0x1a>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_isatty_r+0x1a>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	200006b8 	.word	0x200006b8

08005368 <_sbrk_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	@ (8005384 <_sbrk_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb fdf6 	bl	8000f64 <_sbrk>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_sbrk_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_sbrk_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	200006b8 	.word	0x200006b8

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
